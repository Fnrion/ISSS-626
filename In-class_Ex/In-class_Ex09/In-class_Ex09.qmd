---
title: "In-class_Ex09"
author: "Zou Jiaxun"
date: "Oct 28, 2024"
data-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
  cache: true
format:
  html:
    code-fold: true
    code-summary: "Click to view code"
---

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, 
               tmap, rsample, Metrics, tidyverse, SpatialAcc, ggstatsplot)
```

```{r}
eldercare <- st_read(dsn = "data/HDB/rawdata",
                     layer = "ELDERCARE") %>%
  st_transform(crs = 3414)
```

```{r}
CHAS <- st_read("data/HDB/rawdata/CHASClinics.kml") %>%
  st_transform(crs = 3414)
```

```{r}
buffer_1km <- st_buffer(eldercare,
                        dist = 1000)
```

```{r}
tmap_mode("view")
tm_shape(buffer_1km) +
  tm_polygons() +
tm_shape(CHAS) +
  tm_dots()
```

```{r}
buffer_1km$pts_count <- lengths(
  st_intersects(buffer_1km, CHAS))
```

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MP14_SUBZONE_NO_SEA_PL") %>%
  st_transform(crs = 3414)

hexagons <- st_read(dsn = "data/geospatial",
                   layer = "hexagons") %>%
  st_transform(crs = 3414)

eldercare <- st_read(dsn = "data/geospatial",
                     layer = "ELDERCARE") %>%
  st_transform(csr = 3414)
```

```{r}
eldercare <- eldercare %>%
  select(fid, ADDRESSPOS) %>%
  mutate(capacity = 100)
```

```{r}
hexagons <- hexagons %>%
  select(fid) %>%
  mutate(demand = 100)
```

```{r}
ODMatrix <- read.csv("data/OD_Matrix.csv")
distmat <- ODMatrix %>%
  select(origin_id, destination_id, total_cost) %>%
  spread(destination_id, total_cost)%>%
  select(c(-c('origin_id')))
```

```{r}
distmat_km <- as.matrix(distmat/1000)
```

```{r}
acc_Hansen <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            #d0 = 50,
                            power = 2, 
                            family = "Hansen"))
```

```{r}
colnames(acc_Hansen) <- "accHansen"

acc_Hansen <- as_tibble(acc_Hansen)

hexagon_Hansen <- bind_cols(hexagons, acc_Hansen)
```

```{r}
acc_Hansen <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            #d0 = 50,
                            power = 0.5, 
                            family = "Hansen"))

colnames(acc_Hansen) <- "accHansen"
acc_Hansen <- as_tibble(acc_Hansen)
hexagon_Hansen <- bind_cols(hexagons, acc_Hansen)
```

```{r}
mapex <- st_bbox(hexagons)

tmap_mode("plot")
tm_shape(hexagon_Hansen,
         bbox = mapex) + 
  tm_fill(col = "accHansen",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: Hansen method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

```{r}
hexagon_Hansen <- st_join(hexagon_Hansen, mpsz, 
                          join = st_intersects)
ggbetweenstats(
  data = hexagon_Hansen,
  x = REGION_N,
  y = accHansen,
  type = "p")
```

::: {style="font-size: 1.50em"}
```{r}
# pacman::p_load(tidyverse, sf, httr, jsonlite, rvest)
```

```{r}
# resale <- read_csv("data/HDB/rawdata/resale.csv") %>%
#   filter(month >= "2023-01" & month <= "2024-09")
```

```{r}
# resale_tidy <- resale %>%
#   mutate(address = paste(block,street_name)) %>%
#   mutate(remaining_lease_yr = as.integer(
#     str_sub(remaining_lease, 0, 2)))%>%
#   mutate(remaining_lease_mth = as.integer(
#     str_sub(remaining_lease, 9, 11)))
```

```{r}
# resale_selected <- resale_tidy %>%
#   filter(month == "2024-09")
```

```{r}
# add_list <- sort(unique(resale_selected$address))
```

```{r}
# get_coords <- function(add_list){
#   
#   # Create a data frame to store all retrieved coordinates
#   postal_coords <- data.frame()
#     
#   for (i in add_list){
#     #print(i)
# 
#     r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',
#            query=list(searchVal=i,
#                      returnGeom='Y',
#                      getAddrDetails='Y'))
#     data <- fromJSON(rawToChar(r$content))
#     found <- data$found
#     res <- data$results
#     
#     # Create a new data frame for each address
#     new_row <- data.frame()
#     
#     # If single result, append 
#     if (found == 1){
#       postal <- res$POSTAL 
#       lat <- res$LATITUDE
#       lng <- res$LONGITUDE
#       new_row <- data.frame(address= i, 
#                             postal = postal, 
#                             latitude = lat, 
#                             longitude = lng)
#     }
#     
#     # If multiple results, drop NIL and append top 1
#     else if (found > 1){
#       # Remove those with NIL as postal
#       res_sub <- res[res$POSTAL != "NIL", ]
#       
#       # Set as NA first if no Postal
#       if (nrow(res_sub) == 0) {
#           new_row <- data.frame(address= i, 
#                                 postal = NA, 
#                                 latitude = NA, 
#                                 longitude = NA)
#       }
#       
#       else{
#         top1 <- head(res_sub, n = 1)
#         postal <- top1$POSTAL 
#         lat <- top1$LATITUDE
#         lng <- top1$LONGITUDE
#         new_row <- data.frame(address= i, 
#                               postal = postal, 
#                               latitude = lat, 
#                               longitude = lng)
#       }
#     }
# 
#     else {
#       new_row <- data.frame(address= i, 
#                             postal = NA, 
#                             latitude = NA, 
#                             longitude = NA)
#     }
#     
#     # Add the row
#     postal_coords <- rbind(postal_coords, new_row)
#   }
#   return(postal_coords)
# }
```

```{r}
# coords <- get_coords(add_list)
```

```{r}
# write_rds(coords, "data/HDB/rds/coords.rds")
```
:::
