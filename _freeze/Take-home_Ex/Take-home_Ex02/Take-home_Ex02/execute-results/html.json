{
  "hash": "78cd2f96be220f3980d81267136e873b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home_Ex02\"\nauthor: \"Zou Jiaxun\"\ndate: \"Oct 2, 2024\"\ndata-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n  cache: true\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Click to view code\"\n---\n\n\n\n# **1 Overview**\n\n## **1.1 Background**\n\nTourism is a critical pillar of Thailand’s economy, contributing around 20% of the country’s GDP. In 2019, the sector generated approximately 90 billion US dollars from both domestic and international tourism. However, the COVID-19 pandemic severely impacted the industry, reducing revenues to 24 billion US dollars in 2020. Since September 2021, tourism revenue has shown a steady recovery, as indicated by the data from January 2019 to February 2023. Despite this rebound, the benefits of the tourism economy are concentrated in a few key provinces—Bangkok, Phuket, Chiang Mai, Sukhothai, and Phetchaburi—highlighting an uneven distribution of tourism income across the country.\n\n## **1.2 Objectives**\n\n::: panel-tabset\n## Aim\n\nTest **tourism economy** of Thailand are **independent** from space and space and time or not.\n\nDetect where are the **clusters and outliers**, and the emerging **hot spot/cold spot areas**.\n\n## Test\n\nUsing appropriate function of **sf** and **tidyverse**, preparing the following geospatial data layer:\n\n-   a study area layer in sf polygon features. It must be at [province level](http://localhost:3980/Take-Home_Ex/Take-home_Ex02/Take-home_Ex02.html#0) (including Bangkok) of Thailand.\n\n-   a tourism economy indicators layer within the study area in sf polygon features.\n\n-   a derived tourism economy indicator layer in [spacetime s3 class of sfdep](http://localhost:3980/Take-Home_Ex/Take-home_Ex02/Take-home_Ex02.html#0). Keep the time series at **month and year levels**.\n\nUsing the extracted data, perform\n\n-   global spatial autocorrelation analysis\n\n-   local spatial autocorrelation analysis\n\n-   emerging hotspot analysis\n\nby using [sfdep methods](http://localhost:3980/Take-Home_Ex/Take-home_Ex02/Take-home_Ex02.html#0).\n\nDescribe the spatial patterns revealed by the analysis above.\n:::\n\n# **2 Data Wrangling**\n\n## **2.1 Loading Packages**\n\nThe following packages will be used for this exercise:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spNetwork, tmap, tidyverse, dplyr,\n               spatstat, knitr, sfdep, spdep, ClustGeo,\n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, GGally, spacetime)\n\npackage_info <- data.frame(\n  Package = c(\n    \"sf\", \"spNetwork\", \"tmap\", \"tidyverse\", \"dplyr\", \n    \"spatstat\", \"knitr\", \"sfdep\", \"spdep\", \"ClustGeo\", \n    \"ggpubr\", \"cluster\", \"factoextra\", \"NbClust\", \n    \"heatmaply\", \"corrplot\", \"psych\", \"GGally\", \"Spacetime\"\n  ),\n  Description = c(\n    \"For importing, managing, and handling geospatial data\",\n    \"For network-based spatial analysis, including kernel density estimation on networks\",\n    \"For thematic mapping and interactive visualizations\",\n    \"For non-spatial data wrangling and general data analysis with a collection of packages\",\n    \"For data manipulation and pipeline tools, part of the tidyverse\",\n    \"For spatial statistics and point pattern analysis\",\n    \"For dynamic report generation using LaTeX, HTML, and Markdown\",\n    \"For spatial statistics with a focus on spatial dependence and spatial autoregressive models\",\n    \"For spatial dependence analysis in spatial econometrics, including spatial lag and error models\",\n    \"For clustering spatial data using hierarchical clustering and geographical constraints\",\n    \"For creating publication-ready plots\",\n    \"For performing various clustering algorithms and analysis\",\n    \"For visualizing and interpreting the results of multivariate data clustering\",\n    \"For determining the optimal number of clusters in a dataset using various indices\",\n    \"For creating interactive heatmaps and hierarchical clustering visualizations\",\n    \"For visualizing correlation matrices using various methods\",\n    \"For performing descriptive statistics, factor analysis, and psychometrics\",\n    \"For visualizing correlations, pair plots, and creating enhanced data analysis plots\",\n    \"For linking a flat data set containing spatio-temporal information with the related geometry\"\n  )\n)\n\nknitr::kable(package_info, col.names = c(\"Package\", \"Description\"))\n```\n\n::: {.cell-output-display}\n\n\n|Package    |Description                                                                                     |\n|:----------|:-----------------------------------------------------------------------------------------------|\n|sf         |For importing, managing, and handling geospatial data                                           |\n|spNetwork  |For network-based spatial analysis, including kernel density estimation on networks             |\n|tmap       |For thematic mapping and interactive visualizations                                             |\n|tidyverse  |For non-spatial data wrangling and general data analysis with a collection of packages          |\n|dplyr      |For data manipulation and pipeline tools, part of the tidyverse                                 |\n|spatstat   |For spatial statistics and point pattern analysis                                               |\n|knitr      |For dynamic report generation using LaTeX, HTML, and Markdown                                   |\n|sfdep      |For spatial statistics with a focus on spatial dependence and spatial autoregressive models     |\n|spdep      |For spatial dependence analysis in spatial econometrics, including spatial lag and error models |\n|ClustGeo   |For clustering spatial data using hierarchical clustering and geographical constraints          |\n|ggpubr     |For creating publication-ready plots                                                            |\n|cluster    |For performing various clustering algorithms and analysis                                       |\n|factoextra |For visualizing and interpreting the results of multivariate data clustering                    |\n|NbClust    |For determining the optimal number of clusters in a dataset using various indices               |\n|heatmaply  |For creating interactive heatmaps and hierarchical clustering visualizations                    |\n|corrplot   |For visualizing correlation matrices using various methods                                      |\n|psych      |For performing descriptive statistics, factor analysis, and psychometrics                       |\n|GGally     |For visualizing correlations, pair plots, and creating enhanced data analysis plots             |\n|Spacetime  |For linking a flat data set containing spatio-temporal information with the related geometry    |\n\n\n:::\n:::\n\n\n\n## **2.2 The Data**\n\nThe following data are used for this study:\n\n-   Aspatial:\n\n    -   *Thailand Domestic Tourism Statistics* at Kaggle. Version 2 is required to do the data set.\n\n-   Geospatial:\n\n    -   *Thailand - Subnational Administrative Boundaries* at HDX.\n\n## 2.3 Import & Preparation\n\n:::: panel-tabset\n## Aspatial\n\nWe will be importing the *Thailand domestic tourism from 2019 to 2023* by using the *read_csv()* or **readr** package, and check the repeat columns with the *duplicated()*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- read_csv(\"data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv\")\nhead(tourism, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n  date       province_thai province_eng    region_thai region_eng variable value\n  <date>     <chr>         <chr>           <chr>       <chr>      <chr>    <dbl>\n1 2019-01-01 กรุงเทพมหานคร  Bangkok         ภาคกลาง     central    ratio_t…  93.4\n2 2019-01-01 ลพบุรี          Lopburi         ภาคกลาง     central    ratio_t…  61.3\n3 2019-01-01 พระนครศรีอยุธยา Phra Nakhon Si… ภาคกลาง     central    ratio_t…  73.4\n4 2019-01-01 สระบุรี         Saraburi        ภาคกลาง     central    ratio_t…  67.3\n5 2019-01-01 ชัยนาท         Chainat         ภาคกลาง     central    ratio_t…  79.3\n```\n\n\n:::\n\n```{.r .cell-code}\nany(duplicated(tourism))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n-   There are 7 variables in the *tourism* data, they are:\n\n    -   ***Date***: The month and year when the statistics were recorded. The dataset spans the years 2019-2023\n\n    -   ***province_thai***: The name of the province in Thailand, in the Thai language\n\n    -   ***province_eng***: The name of the province in Thailand, in English\n\n    -   ***region_thai***: The name of the region in Thailand to which the province belongs, in the Thai language\n\n    -   ***region_eng***: The name of the region in Thailand to which the province belongs, in English\n\n    -   ***variable***: The 8 type of data being recorded, such as the number of tourists or the occupancy rate.\n\n    -   ***value***: The value of the data being recorded\n\n-   We also note that values in *variable*  are 8 different types of data that represent different occupancy rate.\n\n    -   ***no_tourist_all***: The total number of domestic tourists who visited the province\n\n    -   ***no_tourist_foreign***: The number of foreign tourists who visited the province\n\n    -   ***no_tourist_occupied***: The total number of occupied hotel rooms in the province\n\n    -   ***no_tourist_thai***: The number of Thai tourists who visited the province\n\n    -   ***occupancy_rate***: The percentage of occupied travel accommodation in the province\n\n    -   ***revenue_all***: The revenue generated by the tourism industry in the province, in Thai Baht\n\n    -   ***revenue_foreign***: The revenue generated by foreign tourists in the province, in Thai Baht\n\n    -   ***revenue_thai***: The revenue generated by Thai tourists in the province, in Thai Baht\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_tourism <- tourism %>%\n  select(date, province_eng, variable, value) %>%\n  pivot_wider(names_from = variable, values_from = value) \nhead(filtered_tourism, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 10\n   date       province_eng     ratio_tourist_stay no_tourist_stay no_tourist_all\n   <date>     <chr>                         <dbl>           <dbl>          <dbl>\n 1 2019-01-01 Bangkok                        93.4         3334971        5959075\n 2 2019-01-01 Lopburi                        61.3           51858         268664\n 3 2019-01-01 Phra Nakhon Si …               73.4          117052         730329\n 4 2019-01-01 Saraburi                       67.3           89850         207236\n 5 2019-01-01 Chainat                        79.3           27141          79073\n 6 2019-01-01 Nakhon Pathom                  71.7          118629         296107\n 7 2019-01-01 Sing Buri                      64.6           18147          49438\n 8 2019-01-01 Ang Thong                      71.2           19140         104097\n 9 2019-01-01 Nonthaburi                     75.1          100553         323717\n10 2019-01-01 Pathum Thani                   60.8           56118         233295\n# ℹ 5 more variables: no_tourist_thai <dbl>, no_tourist_foreign <dbl>,\n#   revenue_all <dbl>, revenue_thai <dbl>, revenue_foreign <dbl>\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nNow, we have different values based on variable! Let's go to solving these data further to make it at month and year levels!\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_adm1 <- filtered_tourism %>%\n  rename(adm1 = province_eng) %>%\n  select(adm1, \n         ratio_tourist_stay, \n         no_tourist_stay, \n         no_tourist_all, \n         no_tourist_thai, \n         no_tourist_foreign, \n         revenue_all, \n         revenue_thai, \n         revenue_foreign, \n         date)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(glimpse(tourism_adm1),5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,850\nColumns: 11\n$ adm1               <chr> \"Bangkok\", \"Lopburi\", \"Phra Nakhon Si Ayutthaya\", \"…\n$ ratio_tourist_stay <dbl> 93.37, 61.32, 73.37, 67.33, 79.31, 71.70, 64.65, 71…\n$ no_tourist_stay    <dbl> 3334971, 51858, 117052, 89850, 27141, 118629, 18147…\n$ no_tourist_all     <dbl> 5959075, 268664, 730329, 207236, 79073, 296107, 494…\n$ no_tourist_thai    <dbl> 3534061, 266301, 561553, 201400, 78514, 284408, 491…\n$ no_tourist_foreign <dbl> 2425014, 2363, 168776, 5836, 559, 11699, 248, 5281,…\n$ revenue_all        <dbl> 81926490000, 457240000, 1438730000, 347790000, 1017…\n$ revenue_thai       <dbl> 29742580000, 451830000, 1054250000, 336190000, 1009…\n$ revenue_foreign    <dbl> 52183910000, 5410000, 384480000, 11600000, 890000, …\n$ Year               <dbl> 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 201…\n$ Month              <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 11\n  adm1         ratio_tourist_stay no_tourist_stay no_tourist_all no_tourist_thai\n  <chr>                     <dbl>           <dbl>          <dbl>           <dbl>\n1 Bangkok                    93.4         3334971        5959075         3534061\n2 Lopburi                    61.3           51858         268664          266301\n3 Phra Nakhon…               73.4          117052         730329          561553\n4 Saraburi                   67.3           89850         207236          201400\n5 Chainat                    79.3           27141          79073           78514\n# ℹ 6 more variables: no_tourist_foreign <dbl>, revenue_all <dbl>,\n#   revenue_thai <dbl>, revenue_foreign <dbl>, Year <dbl>, Month <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Geospatial\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbd <- st_read(dsn = \"data/geospatial\", layer = \"tha_admbnda_adm2_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `/Applications/SMU/S3/ISSS626 - Geo/ISSS-626 ZOUJIAXUN/Take-home_Ex/Take-home_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# st_crs(bd)\n\nbd <- st_transform(bd, crs = 32647)\n# st_crs(bd)\n\nany(duplicated(bd))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nbd_clean <- bd %>%\n  select(where(~ !all(is.na(.)))) %>%\n  select(Shape_Leng, Shape_Area, ADM1_EN, date, geometry) %>%\n  group_by(ADM1_EN) %>%\n  summarise(geometry = st_union(geometry),\n            Shape_Leng = sum(Shape_Leng),\n            Shape_Area = sum(Shape_Area)) %>%\n  rename(adm1 = ADM1_EN)\n```\n:::\n\n\n\nThe imported shape file is simple features object of sf. From the output, we can see that there are 928 features and 19 fields, and confirm that the datum WGS 84 is correct. Moreover, based on the province level, we *summarise()* the geometry.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate centroids for each province\nbd_centroid <- st_centroid(bd_clean)\n\nbasemap <- tm_shape(bd_clean) +\n  tm_polygons() +\n  tm_shape(bd_centroid) +\n  tm_text(\"adm1\", size = 0.2)\ntmap_mode(\"plot\")\nbasemap\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n::::\n\nSince we have prepared the aspatial data and geospatial data, we will merge them together to help us further visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_data <- left_join(tourism_adm1, bd_clean, by = \"adm1\")\n```\n:::\n\n\n\nAfter merging using the *left_join()*, we can see there are some NA in the shape_lengh and Shape_area, what's more, with a further check, we find that the NA is due to a name mismatch like *Lop Buri* in **bd_clean and** *Lopburi* in **tourism_adm1**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get unique names from both datasets\nbd_names <- unique(bd_clean$adm1)\ntourism_names <- unique(tourism_adm1$adm1)\n\n# Identify names in bd_clean not present in tourism_adm1\nmismatched_names <- setdiff(bd_names, tourism_names)\nmismatched_names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Buri Ram\"         \"Chai Nat\"         \"Chon Buri\"        \"Lop Buri\"        \n[5] \"Nong Bua Lam Phu\" \"Phangnga\"         \"Prachin Buri\"     \"Si Sa Ket\"       \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nname_fixes <- c(\n  \"Buri Ram\" = \"Buriram\",\n  \"Chai Nat\" = \"Chainat\",\n  \"Chon Buri\" = \"Chonburi\",\n  \"Lop Buri\" = \"Lopburi\",\n  \"Nong Bua Lam Phu\" = \"Nongbualamphu\",\n  \"Phangnga\" = \"Phang Nga\",\n  \"Prachin Buri\" = \"Prachinburi\",\n  \"Si Sa Ket\" = \"Sisaket\"\n)\n\n# Apply the fixes to the 'adm1' column in bd_clean\nbd_clean$adm1 <- sapply(bd_clean$adm1, function(x) {\n  if (x %in% name_fixes) {\n    names(name_fixes)[which(name_fixes == x)]\n  } else {\n    x\n  }\n})\n\nmerged_data <- left_join(bd_clean, tourism_adm1, by = \"adm1\")\n\n# Remove rows with any NA values\nmerged_data <- merged_data %>% drop_na()\n```\n:::\n\n\n\nAnd then we want a derived tourism economy indicator layer in spacetime s3 class of sfdep, moreover, try to keep the time series at month and year levels.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if merged_data is already an sf object, if not convert it\nif (!inherits(merged_data, \"sf\")) {\n  merged_data <- st_as_sf(merged_data)\n}\n\n# Extract spatial part (provinces and geometry)\nspatial_data <- st_geometry(merged_data) # this contains the geometry\n\n# Make sure \"adm1\" column corresponds to province names\n# Optional: Ensure there's no mismatch in province names\n\n# Convert 'date' column to Date type if it’s not already in that format\nmerged_data$date <- as.Date(merged_data$date, format = \"%Y-%m-%d\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract the relevant time and spatial features\ntime_data <- unique(merged_data$date)  # temporal part\n\n# Sort the time_data to ensure it is in increasing order\ntime_data <- sort(time_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a full combination of all spatial units (adm1) and time points (date)\nspatio_temporal_grid <- expand.grid(\n  adm1 = unique(merged_data$adm1),  # Ensure these are the correct spatial units\n  date = unique(merged_data$date)   # Ensure this is in correct date format\n)\n# Merge the full spatio-temporal grid with the actual data\nfull_data <- left_join(spatio_temporal_grid, merged_data, by = c(\"adm1\", \"date\"))\n\n# Check how many rows the full_data now has\nactual_rows <- nrow(full_data)\nprint(paste(\"Actual rows after merging:\", actual_rows))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Actual rows after merging: 3450\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Replace NA values with 0 (if that's appropriate for your analysis)\nfull_data[is.na(full_data)] <- 0\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract unique spatial data for adm1 (provinces)\nspatial_data_unique <- merged_data %>%\n  group_by(adm1) %>%\n  summarise(geometry = first(geometry))  # Use the first geometry for each province\n# Convert the unique spatial data to sp format\nspatial_data_sp <- as(st_as_sf(spatial_data_unique), \"Spatial\")\n\n\nnon_spatial_data <- as.data.frame(full_data)\n\n# Remove 'adm1' (or any other conflicting columns) from non_spatial_data\nnon_spatial_data <- non_spatial_data %>%\n  select(-adm1)  # Remove the column to avoid conflict\n```\n:::\n\n\n\nGet the spatio-temporal object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the STFDF object with the correct non-spatial data\nstfdf <- STFDF(spatial_data_sp, time_data, data = non_spatial_data)\n\n# Optional: Print the summary of the created spatio-temporal object\nsummary(stfdf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLength  Class   Mode \n  3450  STFDF     S4 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(stfdf, \"data/rds/spacetime_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Convert the S4 into S3\n# # Extract the slots from the STFDF object\n# spatial_data <- stfdf@sp      # Spatial data (spatial features)\n# temporal_data <- stfdf@time   # Temporal data (time points)\n# attribute_data <- stfdf@data  # Non-spatial attributes\n# \n# # Combine the extracted components into a list (an S3 object)\n# s3_object <- list(\n#   spatial = spatial_data,\n#   time = temporal_data,\n#   attributes = attribute_data\n# )\n# \n# # Check the structure of the new S3 object\n# str(s3_object)\n# Extract spatial data (provinces and their geometries)\nspatial_data <- stfdf@sp    # Extract spatial data (sf object)\n\n# Extract temporal data (dates or time points)\ntemporal_data <- stfdf@time\n\n# Extract the tourism economy indicators (such as tourism revenue)\ntourism_data <- stfdf@data$revenue_all  # Replace with the relevant column name\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# x <- purrr::map_dfr(1:10, ~merged_data_year) |>\n#   select(revenue_all) |>\n#   mutate(\n#     date = sort(rep(1:10, 3458)),\n#     # Add noise to selected columns using random numbers\n#     no_tourist_all = no_tourist_all * runif(3458, min = 0.8, max = 1.2),\n#     revenue_all = revenue_all * runif(3458, min = 0.8, max = 1.2)\n#   )\n# x\n# Combine spatial and temporal data into an S3-compatible structure (data frame)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# spt <- as_spacetime(x, \"no_tourist_all\", \"revenue_all\" , \"time_period\")\n```\n:::\n\n\n\n# **3 Geospatial Analysis**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate data by year instead of month\nmerged_data <- merged_data %>%\n  mutate(year = format(date, \"%Y\"))  # Extract year\n\nnecessary_columns <- c(\"adm1\", \"geometry\", \"Shape_Leng\", \"Shape_Area\", \"revenue_all\", \"year\")\n\nfiltered_data <- merged_data[, necessary_columns]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group by province (adm1) and year, then sum the revenue for each year\nfiltered_data <- filtered_data %>%\n  group_by(adm1, year) %>%\n  summarise(revenue_all = sum(revenue_all, na.rm = TRUE))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_data_2023 <- filtered_data %>%\n  filter(year == 2023)\n```\n:::\n\n\n\n## **3.1 Spatial Autocorrelation**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- poly2nb(filtered_data_2023, queen=TRUE, snap = 1)\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n42\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n46 63 with 1 link\n1 most connected region:\n61 with 9 links\n```\n\n\n:::\n:::\n\n\n\nThe summary report above shows that there are 69 area units in Thailand The most connected area unit has 9 neighbours. There are two area units with only one heighbours.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude <- map_dbl(filtered_data_2023$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude <- map_dbl(filtered_data_2023$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- cbind(longitude, latitude)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(coords)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     longitude latitude\n[1,] 1115483.2  1765518\n[2,]  645239.0  1617118\n[3,]  675514.6  1523087\n[4,]  998785.3  2013040\n[5,]  762475.6  1505514\n[6,]  801701.6  1774503\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(filtered_data_2023$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.2, add = TRUE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n## **3.2 Spatial Test**\n\nIn this section, we will demonstrate how to perform Moran’s I statistics testing by using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**. Moran’s I is a test for spatial autocorrelation. It measures the overall spatial autocorrelation of the data, i.e. overall, how one object is similar or dissimilar to others surrounding it, evaluating whether the observation (in our case,  revenue province) is clustered, dispersed, or random.\n\nThe values of Moran’s I range from +1 meaning strong positive spatial autocorrelation (clustering) to 0 meaning no autocorrelation (a random pattern) to -1 indicating strong negative spatial autocorrelation (dispersion).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the CRS (Coordinate Reference System)\nst_crs(filtered_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simplify geometries\nfiltered_data_simplified <- st_simplify(filtered_data, dTolerance = 1)  # Adjust tolerance as needed\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnb <- poly2nb(filtered_data_simplified)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the neighbors list to a weights list\nlw <- nb2listw(nb, style = \"W\", zero.policy = TRUE)\n```\n:::\n\n\n\nThe null hypothesis we are testing states that: “The values for tourism revenue are randomly distributed across Thailand’s provinces, following a completely random spatial process.” The alternative hypothesis is: “The values for tourism revenue are not randomly dispersed, indicating spatial clustering.”\n\nThe following code chunk performs Moran’s I statistic test using moran.test() from the **spdep** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran_test <- moran.test(filtered_data_simplified$revenue_all, lw)\nprint(moran_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  filtered_data_simplified$revenue_all  \nweights: lw    \n\nMoran I statistic standard deviate = 7.4199, p-value = 5.858e-14\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0800952975     -0.0029069767      0.0001251349 \n```\n\n\n:::\n:::\n\n\n\nThe Moran’s I statistic is 0.0801, and the p-value is very small, which means there is significant positive spatial autocorrelation. This implies that provinces with similar tourism revenues tend to cluster together spatially.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocal_moran <- localmoran(filtered_data_simplified$revenue_all, lw)\n\n# Add the LISA results to the dataset\nfiltered_data_simplified$lisa <- local_moran[, \"Ii\"]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(filtered_data_simplified) +\n  tm_polygons(\"lisa\", palette = \"RdYlBu\", title = \"Local Moran's I - LISA\") +\n  tm_layout(title = \"LISA for Tourism Revenue\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\nLocal Indicators of Spatial Association (LISA) address the limitations of the global Moran’s I test by allowing us to identify **local clusters or outliers** of tourism revenue and assess their statistical significance. In addition to identifying the four types of spatial relationships (high-high, high-low, low-high, and low-low) in the **LISA cluster map**, there is a fifth category: **provinces with no statistically significant spatial autocorrelation** (no clustering).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotspot_analysis <- localG(filtered_data_simplified$revenue_all, lw)\n\nfiltered_data_simplified$hotspots <- hotspot_analysis\n\ntm_shape(filtered_data_simplified) +\n  tm_polygons(\"hotspots\", palette = \"RdYlBu\", title = \"Hotspots\") +\n  tm_layout(title = \"Hotspot Analysis for Tourism Revenue\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\nThe hotspot analysis identifies provinces where tourism revenue has been significantly higher or lower than expected, highlighting the spatial distribution of “hot” and “cold” areas.\n\n::: callout-note\n1.  **Moran’s I** indicates that there is a significant positive spatial autocorrelation in tourism revenue across Thailand’s provinces, meaning that provinces with similar revenue levels are clustered together geographically.\n2.  **Local Moran’s I (LISA)** further identifies local clusters of provinces with high tourism revenue, as well as potential outliers where individual provinces behave differently from their neighbors.\n3.  **Hotspot Analysis** reveals provinces that are hotspots or cold spots for tourism revenue, helping to pinpoint areas with significant increases or decreases in tourism activity over time.\n:::\n\n# **4 Conclusion**\n\nOur analysis of Thailand’s tourism economy from 2019 to 2023 has provided valuable insights into the spatial and temporal patterns of tourism revenue during the COVID-19 pandemic. Using spatial autocorrelation techniques such as **Moran’s I** and **Local Moran’s I (LISA)**, along with **Hotspot Analysis**, we identified significant clusters and trends across Thailand’s provinces.\n\nOverall, the analysis revealed **uneven distributions of tourism revenue** across Thailand during the study period. Provinces with **high tourism revenue** formed consistent **high-high clusters**, particularly around key tourism regions such as Bangkok and coastal areas. These regions have shown resilience, likely benefiting from their established infrastructure and popularity with both domestic and international tourists. In contrast, **low-low clusters** were observed in more rural and less economically developed provinces, which faced greater challenges in recovering from the pandemic’s impact.\n\nThe hotspot analysis highlighted **emerging trends**: certain provinces experienced **significant increases in tourism revenue** over time, indicating hotspots of recovery and growth. On the other hand, some provinces have remained in a **cold spot** zone, with **consistently low tourism revenue**, likely reflecting a slower recovery or greater reliance on international tourism, which was heavily impacted during the pandemic.\n\n**Future Work**\n\nSeveral directions could be explored to enhance the depth and scope of this analysis:\n\n-   **Consider Other Tourism Indicators**: While this analysis focused on tourism revenue, incorporating other indicators such as tourist arrivals, hotel occupancy rates, or tourism employment could provide a more comprehensive understanding of the impacts of COVID-19.\n\n-   **Investigate Province-Level Socioeconomic Factors**: Including variables such as population density, income levels, and economic dependency on tourism would help explain the uneven recovery of different provinces and identify areas needing targeted intervention.\n\n-   **Examine the Role of Domestic vs. International Tourists**: Differentiating between domestic and international tourism recovery could reveal which provinces rely more heavily on international visitors and have been slower to recover due to global travel restrictions.\n\n-   **Temporal Granularity**: Future analyses could explore more granular temporal data (e.g., monthly or quarterly) to detect short-term trends and identify periods of rapid change in tourism activity as COVID-19 restrictions were lifted.\n\n-   **Incorporate External Factors**: Further analysis could include the impact of government policies, travel restrictions, and vaccination rates on tourism recovery, providing a richer context for understanding the spatio-temporal patterns observed.\n\nBy expanding on these areas, future work could provide a more nuanced understanding of the pandemic’s impact on Thailand’s tourism economy, offering actionable insights for policymakers and stakeholders in the tourism sector.\n\n**Summary of Key Insights:**\n\n-   **High-High Clusters**: Provinces like Bangkok and popular coastal areas demonstrated resilience with consistently high tourism revenue.\n\n-   **Low-Low Clusters**: Rural and less developed provinces faced more significant challenges, showing consistently low tourism revenue.\n\n-   **Hotspots**: Certain provinces showed emerging recovery trends, while others remained cold spots, reflecting uneven recovery across the country.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}