{
  "hash": "17f1328375b7dc8c0bcb8c7e100d2f7d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home_Ex01\"\nauthor: \"Zou Jiaxun\"\ndate: \"Sep 23, 2024\"\ndata-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n  cache: true\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Click to view code\"\n---\n\n\n\n::: {.alert .alert-dismissible .alert-primary style=\"width: 94%;\"}\n**OH NO!!!**\n\n**There is a collapse after 1 day data processing!!**\n\n**Error: vector memory limit of 16.0 Gb reached, see mem.maxVSize()!!!**\n\n![](Picture/NONONO.png){fig-align=\"center\" width=\"80\" height=\"100\"}\n\n**Important thing to learn, even if shrinking data into 1/30, still try saveRDS!!!**\n:::\n\n# **1 Overview**\n\n## **1.1 Background**\n\nSpatial Point Patterns Analysis (SPPA) has proven to be an effective tool in studying and identifying the factors that contribute to road traffic accidents. Previous research has highlighted its potential, particularly in exploring spatial distributions and correlations. However, much of this research has predominantly concentrated on either behavioral factors (such as driver behavior and road usage) or environmental factors (such as road conditions and weather). Temporal factors—such as seasonal variations, the day of the week, or specific times of day—have received limited attention, despite their potential influence on accident patterns. Addressing these temporal dimensions can offer a more comprehensive understanding of traffic accidents, contributing to more effective prevention strategies.\n\n## **1.2 Objectives**\n\n::: callout-caution\n[Here](https://isss626-ay2024-25aug.netlify.app/take-home_ex01) are the requirement of take-home_Ex01\n:::\n\n# **2 Data Wrangling**\n\n## **2.1 Loading Packages**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spNetwork, tmap, tidyverse, dplyr, spatstat, knitr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\n\n# Create a table with package names and descriptions\npackage_info <- data.frame(\n  Package = c(\"sf\", \"spNetwork\", \"tmap\", \"tidyverse\", \"dplyr\", \"spatstat\"),\n  Description = c(\n    \"For importing, managing, and handling geospatial data\",\n    \"For network-based spatial analysis, including kernel density estimation on networks\",\n    \"For thematic mapping\",\n    \"For non-spatial data wrangling and general data analysis\",\n    \"For data manipulation and pipeline tools\",\n    \"For spatial statistics and point pattern analysis\"\n  )\n)\n\n# Display the table using kable (knitr)\nkable(package_info, col.names = c(\"Package\", \"Description\"))\n```\n\n::: {.cell-output-display}\n\n\n|Package   |Description                                                                         |\n|:---------|:-----------------------------------------------------------------------------------|\n|sf        |For importing, managing, and handling geospatial data                               |\n|spNetwork |For network-based spatial analysis, including kernel density estimation on networks |\n|tmap      |For thematic mapping                                                                |\n|tidyverse |For non-spatial data wrangling and general data analysis                            |\n|dplyr     |For data manipulation and pipeline tools                                            |\n|spatstat  |For spatial statistics and point pattern analysis                                   |\n\n\n:::\n:::\n\n\n\n## **2.2 Data Collect**\n\nFor the purpose of this exercise, three basic data sets are needed, they are:\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\nAll of them are spatial data\n\n## **2.3 Preparation**\n\nNow we’re loading both the event (acc), polygon (dm2) and road network (Road). Ensure that each layer is in the same CRS. (P.S. this step will overlap the Kfun, since too many points in the same location)\n\n::: panel-tabset\n## Car accident (acc)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List of BMR provinces\nbmr_provinces <- c(\"Bangkok\", \"Nonthaburi\", \"Pathum Thani\", \"Samut Prakan\", \"Nakhon Pathom\", \"Samut Sakhon\")\n\n# Read and process the accident data\ncar_acc <- read_csv('data/Thailand_Road_Accident/thai_road_accident_2019_2022.csv') %>%\n  \n  # Remove rows with missing longitude or latitude\n  filter(!is.na(longitude) & !is.na(latitude)) %>%\n\n  # Filter rows for BMR provinces\n  filter(province_en %in% bmr_provinces) %>%\n  \n  # Create new columns\n  mutate(Month_num = month(incident_datetime),\n         Month_fac = month(incident_datetime, label = TRUE, abbr = TRUE),\n         Day = day(incident_datetime),\n         Day_of_week = wday(incident_datetime, label = TRUE),\n         incident_datetime = ymd_hms(incident_datetime),\n         clock = format(incident_datetime, \"%H:%M:%S\")) %>%\n  \n  # Convert to an sf object\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%\n  \n  # Reproject to UTM Zone 47N (for Thailand)\n  st_transform(crs = 32647)\n\n  # add later time analysis car_acc_time\ncar_acc_time <- car_acc\n  \ncar_acc <- car_acc_time %>%\n  select(1, 5, 17:22)\n\ncar_acc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 12986 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 12,986 × 8\n   acc_code province_en   Month_num Month_fac   Day Day_of_week clock   \n      <dbl> <chr>             <dbl> <ord>     <int> <ord>       <chr>   \n 1   571882 Nakhon Pathom         1 Jan           1 Tue         02:25:00\n 2   600001 Nonthaburi            1 Jan           1 Tue         03:00:00\n 3   605043 Samut Prakan          1 Jan           1 Tue         03:00:00\n 4   629691 Bangkok               1 Jan           1 Tue         03:05:00\n 5   571887 Nakhon Pathom         1 Jan           1 Tue         04:30:00\n 6   599234 Samut Prakan          1 Jan           1 Tue         04:45:00\n 7   599990 Samut Sakhon          1 Jan           1 Tue         05:30:00\n 8   612045 Nonthaburi            1 Jan           1 Tue         05:30:00\n 9   629689 Bangkok               1 Jan           1 Tue         05:42:00\n10   607046 Pathum Thani          1 Jan           1 Tue         06:30:00\n# ℹ 12,976 more rows\n# ℹ 1 more variable: geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n\n\n## Administration level 2 (adm2)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load administrative boundaries (adm2 level)\nadm2 <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp\", layer = \"tha_admbnda_adm2_rtsd_20220121\") %>%\n  st_transform(adm2, crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `/Applications/SMU/S3/ISSS-626/ISSS-626 ZOUJIAXUN/Take-home_Ex/Take-home_Ex01/data/tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nadm2_time <- adm2\nadm2 <- adm2_time %>%\n  select(1:3,11,20)\n```\n:::\n\n\n\nFilter administrative boundaries for BMR provinces\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_boundaries <- adm2 %>%\n  filter(ADM1_EN %in% bmr_provinces)\nbmr_boundaries\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 79 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 587893.5 ymin: 1484414 xmax: 712440.5 ymax: 1579076\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n   Shape_Leng   Shape_Area ADM1_EN                       geometry\n1  0.08541733 0.0004504685 Bangkok MULTIPOLYGON (((662263.2 15...\n2  0.13413177 0.0009501914 Bangkok MULTIPOLYGON (((664304.4 15...\n3  0.67634217 0.0198588627 Bangkok MULTIPOLYGON (((706774.6 15...\n4  0.08588647 0.0003369561 Bangkok MULTIPOLYGON (((664040.2 15...\n5  0.30172202 0.0034149298 Bangkok MULTIPOLYGON (((673966.4 15...\n6  0.30869124 0.0023032680 Bangkok MULTIPOLYGON (((676080.6 15...\n7  0.11532413 0.0006716417 Bangkok MULTIPOLYGON (((664236.5 15...\n8  0.06166921 0.0002089751 Bangkok MULTIPOLYGON (((663880.5 15...\n9  0.15667242 0.0011024083 Bangkok MULTIPOLYGON (((674748.8 15...\n10 0.39734629 0.0050495791 Bangkok MULTIPOLYGON (((694735.5 15...\n```\n\n\n:::\n:::\n\n\n\n## Road\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Road <- st_read(dsn = \"data/hotosm_tha_roads_lines_shp\", layer = \"hotosm_tha_roads_lines_shp\") %>%\n#     st_set_crs(4326) %>%  # Assign CRS if it's missing\n#     st_transform(Road, crs = 32647)\nRoad <- readRDS(\"data/Road.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(Road, file = \"data/Road\")\n```\n:::\n\n\n\nFilter the road network to only include roads in the BMR area\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Road_bmr <- st_intersection(Road, bmr_boundaries)\nRoad_bmr <- readRDS(\"data/Road_bmr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(Road_bmr,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 17 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 661230.6 ymin: 1519770 xmax: 661663 ymax: 1520041\nProjected CRS: WGS 84 / UTM zone 47N\n             name           name_en        highway surface smoothness width\n2698  ซอยประตูนกยูง Soi Pratu Nokyung    residential    <NA>       <NA>  <NA>\n2708         <NA>              <NA>        footway    <NA>       <NA>  <NA>\n2709         <NA>              <NA>        footway    <NA>       <NA>  <NA>\n10903        <NA>              <NA> secondary_link    <NA>       <NA>  <NA>\n10909  ถนนจักรเพชร  Chakkraphet Road      secondary    <NA>       <NA>  <NA>\n      lanes oneway bridge layer source     name_th     osm_id  osm_type\n2698   <NA>   <NA>   <NA>  <NA>   <NA> ซอยประตูนกยูง   94451244 ways_line\n2708   <NA>   <NA>   <NA>  <NA>   <NA>        <NA> 1264028727 ways_line\n2709   <NA>   <NA>   <NA>  <NA>   <NA>        <NA> 1264028728 ways_line\n10903  <NA>    yes   <NA>  <NA>   <NA>        <NA> 1311447474 ways_line\n10909  <NA>    yes   <NA>  <NA>   <NA>  ถนนจักรเพชร  157690710 ways_line\n      Shape_Leng   Shape_Area ADM1_EN                       geometry\n2698  0.08541733 0.0004504685 Bangkok LINESTRING (661237.9 151999...\n2708  0.08541733 0.0004504685 Bangkok LINESTRING (661230.6 151997...\n2709  0.08541733 0.0004504685 Bangkok LINESTRING (661234.5 151996...\n10903 0.08541733 0.0004504685 Bangkok LINESTRING (661640.9 151977...\n10909 0.08541733 0.0004504685 Bangkok LINESTRING (661650.9 151977...\n```\n\n\n:::\n:::\n\n\n:::\n\n# **3 Geospatial Analysis**\n\nWe are going to prepare a basemap and a choropleth map showing the distribution of acc by using *qtm()* of **tmap** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_data <- st_join(car_acc_time, adm2_time, join = st_within)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adjust the basemap to use tm_dots() for point data\nbasemap <- tm_shape(adm2_time) +\n  tm_polygons() + \n  tm_text(\"ADM2_EN\", size = 0.5)\n\n# Create the fatalities map\nfatalities <- qtm(joined_data, \"number_of_fatalities\")\n\n# Arrange the maps side by side\ntmap_arrange(basemap, fatalities, asp = 1, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### **3.1 Converting the generic sp format into spatstat’s ppp format**\n\nNow, we will use *as.ppp()* function of **spatstat** to convert the spatial data into **spatstat**’s ***ppp*** object format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_ppp <- as.ppp(car_acc_time)\nacc_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 12986 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n```\n\n\n:::\n:::\n\n\n\nLet us plot ***acc_ppp*** and examine the different.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(acc_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### **3.2 Handling duplicated points**\n\nWe can check the duplication in a ***ppp*** object by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(acc_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\nTo count the number of co-indicence point, we will use the *multiplicity()* function as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(multiplicity(acc_ppp),10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 1 1 1 1 1 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(multiplicity(acc_ppp) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_owin <- as.owin(bmr_boundaries)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(bmr_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### **3.3 Combining point events object and owin object**\n\nIn this last step of geospatial data wrangling, we will extract acc events that are located within bmr by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccbmr_ppp = acc_ppp[bmr_owin]\nplot(accbmr_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n### **3.4 Kernel Density Estimation**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_accbmr_bw <- density(accbmr_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nplot(kde_accbmr_bw)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nSince the plot is too dark, we will use rescale.ppp() and change the sigma_value\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigma_value <- 1000  # Adjust this value based on your smoothing preference\n\naccbmr_ppp.km <- rescale.ppp(accbmr_ppp, 1000, \"km\")\n\nkde_accbmr_bw <- density(accbmr_ppp.km, sigma=sigma_value, edge=TRUE, kernel=\"gaussian\")\n\nplot(kde_accbmr_bw)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nThe KDE map shows that car accidents are concentrated in specific high-risk areas, especially in the eastern region, where accident density is higher. In contrast, the western areas have fewer accidents.\n:::\n\nLet's divide the province and see what's on the south-east\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the required library\nlibrary(spatstat)\n\n# Define the six provinces for BMR (Bangkok Metropolitan Region)\nprovinces <- c(\"Bangkok\", \"Nonthaburi\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\", \"Nakhon Pathom\")\n\n# Loop through each province and generate KDE\nfor (province in provinces) {\n  # Subset the boundary for the specific province\n  province_boundary <- subset(bmr_boundaries, ADM1_EN == province)\n  \n  # Convert the province boundary to owin format for spatstat\n  province_owin <- as.owin(province_boundary)\n  \n  # Subset the accident data for the specific province using province_en\n  province_data <- subset(car_acc_time, province_en == province)\n  \n  # Convert the accident data to ppp format (assuming coordinates are columns 'x' and 'y')\n  # Adjust 'x' and 'y' to the correct column names in your dataset\n  province_ppp <- as.ppp(province_data, W=province_owin)\n  \n  # Rescale to kilometers if necessary\n  province_ppp.km <- rescale.ppp(province_ppp, 1000, \"km\")\n  \n  # Apply KDE with appropriate sigma\n  sigma_value <- 1000  # Adjust this value based on preference\n  kde_province <- density(province_ppp.km, sigma=sigma_value, edge=TRUE, kernel=\"gaussian\")\n  \n  # Plot KDE (this will automatically handle coloring)\n  plot(kde_province, main = paste(\"KDE for\", province))\n  \n  # Overlay the boundary on top (without overriding color)\n  plot(province_owin, add=TRUE, border=\"black\")\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-6.png){width=672}\n:::\n:::\n\n\n\nBased on the KDE, we will choose \"Khlong Luang\", \"Bang Phli\" and \"Mueang Samut Sakhon\" in \"Bangkok\" as our analysis item in road network accident analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_acc_adm2 <- st_join(car_acc_time, adm2)\n# Group by ADM2_EN and count the number of fatalities\nfatalities_by_adm2 <- car_acc_adm2 %>%\n  group_by(ADM2_EN) %>%\n  summarise(total_fatalities = sum(number_of_fatalities, na.rm = TRUE))\nprint(fatalities_by_adm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 73 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 73 × 3\n   ADM2_EN         total_fatalities                                     geometry\n   <chr>                      <dbl>                             <MULTIPOINT [m]>\n 1 Ban Phaeo                     14 ((613054.2 1498274), (615459.1 1494000), (6…\n 2 Bang Bo                       24 ((696848.1 1494239), (696911.6 1494215), (6…\n 3 Bang Bon                       3 ((647897.3 1507733), (647984.3 1507801), (6…\n 4 Bang Bua Thong                37 ((644467.4 1538181), (645940.6 1538078), (6…\n 5 Bang Kapi                      3 ((673251.8 1520460), (673253.2 1520520), (6…\n 6 Bang Khae                      8 ((650262.2 1517270), (651917.2 1516322), (6…\n 7 Bang Khen                      0 ((671860.4 1534927), (672097.5 1534812), (6…\n 8 Bang Kho Laem                  1 ((661444.6 1515089), (661488.6 1515062), (6…\n 9 Bang Khun Thian                5 ((649010.8 1505014), (649042.5 1505674), (6…\n10 Bang Kruai                     8 ((643844.5 1527423), (644559.8 1526978), (6…\n# ℹ 63 more rows\n```\n\n\n:::\n:::\n\n\n\n## **3.5 Analysing Spatial Point Process Using G-Function**\n\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_function <- Gest(accbmr_ppp)\nplot(g_function, main=\"G-Function for Accidents in BMR\", xlim = c(0,500))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nG_CK.csr <- envelope(accbmr_ppp, Gest, nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(G_CK.csr)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nBoth plots suggest that the accidents in the BMR region are spatially clustered, especially at shorter distances\n:::\n\n## **3.6 NKDE**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize accident points\ntmap_mode(\"plot\")\ntm_shape(car_acc) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n### **3.6.1 Spatial Join Accidents to Road Network**\n\nNow we can use st_nearest_feature() to join the accident points with the nearest road segments from the road network. (This will cause the increaing same location point, don't try)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join accidents to the nearest road segment\nacc_with_roads <- st_join(car_acc, Road_bmr, join = st_nearest_feature)\n\n# Check the joined data\nprint(acc_with_roads)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 12986 features and 24 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 12,986 × 25\n   acc_code province_en   Month_num Month_fac   Day Day_of_week clock   \n *    <dbl> <chr>             <dbl> <ord>     <int> <ord>       <chr>   \n 1   571882 Nakhon Pathom         1 Jan           1 Tue         02:25:00\n 2   600001 Nonthaburi            1 Jan           1 Tue         03:00:00\n 3   605043 Samut Prakan          1 Jan           1 Tue         03:00:00\n 4   629691 Bangkok               1 Jan           1 Tue         03:05:00\n 5   571887 Nakhon Pathom         1 Jan           1 Tue         04:30:00\n 6   599234 Samut Prakan          1 Jan           1 Tue         04:45:00\n 7   599990 Samut Sakhon          1 Jan           1 Tue         05:30:00\n 8   612045 Nonthaburi            1 Jan           1 Tue         05:30:00\n 9   629689 Bangkok               1 Jan           1 Tue         05:42:00\n10   607046 Pathum Thani          1 Jan           1 Tue         06:30:00\n# ℹ 12,976 more rows\n# ℹ 18 more variables: geometry <POINT [m]>, name <chr>, name_en <chr>,\n#   highway <chr>, surface <chr>, smoothness <chr>, width <chr>, lanes <chr>,\n#   oneway <chr>, bridge <chr>, layer <chr>, source <chr>, name_th <chr>,\n#   osm_id <dbl>, osm_type <chr>, Shape_Leng <dbl>, Shape_Area <dbl>,\n#   ADM1_EN <chr>\n```\n\n\n:::\n:::\n\n\n\n### **3.6.2 Network-Based Analysis with spNetwork**\n\nNow we can perform network-based spatial analysis, like kernel density estimation (KDE) along the road network. The spNetwork package is useful for this type of analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Convert generic geometries to LINESTRING\n# Road_bmr <- st_cast(Road_bmr, \"LINESTRING\")\nRoad_bmr <- readRDS(\"data/Road_bmr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the adm2 dataset for the selected sub-districts\nselected_adm2 <- adm2 %>%\n  filter(ADM2_EN %in% c(\"Khlong Luang\", \"Bang Phli\", \"Mueang Samut Sakhon\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform spatial join for the filtered sub-districts\ncar_acc_selected_adm2 <- st_intersection(car_acc_time, selected_adm2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform spatial join between Road_bmr and selected_adm2 (the filtered sub-districts)\nroad_selected_adm2 <- st_join(Road_bmr, selected_adm2, left = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels_new <- lixelize_lines(road_selected_adm2, \n                             5000, \n                             mindist = 1000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples_new <- lines_center(lixels_new) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# lixels <- lixelize_lines(Road_bmr, \n#                          2000, \n#                          mindist = 1000)\nlixels <- readRDS(\"data/lixels.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- lines_center(lixels) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now run NKDE with the samples argument included\nkde_new <- nkde(lines = lixels_new,\n            events = car_acc_selected_adm2,\n            w = rep(1, nrow(car_acc_selected_adm2)),\n            kernel_name = \"quartic\",\n            bw = 500,\n            samples = samples_new,\n            method = \"simple\",\n            grid_shape = c(100, 100),\n            verbose = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_new <- kfunctions(lixels_new,\n                   car_acc_selected_adm2,  \n                   start = 0, \n                   end = 10000, \n                   step = 1000, \n                   width = 50, \n                   nsim = 50, \n                   resolution = 50,\n                   verbose = FALSE, \n                   conf_int = 0.05,\n                   agg = 100)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_new\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$plotk\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n$plotg\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-37-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n$values\n        obs_k    lower_k    upper_k      obs_g      lower_g     upper_g\n1   0.0000000 0.00000000 0.00000000 0.00000000 0.0000000000 0.001875781\n2   0.7385274 0.03806559 0.05530117 0.04046187 0.0007856674 0.003142670\n3   1.6078684 0.06194988 0.09196237 0.04183679 0.0003928337 0.003535504\n4   2.4591391 0.08726801 0.13385809 0.05637164 0.0003928337 0.004714005\n5   3.4245280 0.11693678 0.18762721 0.04458663 0.0003928337 0.004537230\n6   4.4032732 0.14549579 0.23709479 0.04046187 0.0007856674 0.004232783\n7   5.4326940 0.17752156 0.29269059 0.05578239 0.0003928337 0.004537230\n8   6.4664359 0.21121687 0.35549488 0.04733646 0.0004812213 0.005106838\n9   7.5852264 0.24570767 0.41464582 0.05637164 0.0007856674 0.004232783\n10  8.7550852 0.27987439 0.47496544 0.07915600 0.0008740550 0.004537230\n11 10.0105818 0.31080022 0.53906608 0.06128206 0.0012668888 0.005715731\n   distances\n1          0\n2       1000\n3       2000\n4       3000\n5       4000\n6       5000\n7       6000\n8       7000\n9       8000\n10      9000\n11     10000\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nThe plot suggests that traffic accidents on the road network are non-randomly clustered, particularly at distances of around 2500 to 5000 meters. This clustering is statistically significant, as indicated by the blue line’s consistent deviation from the confidence envelope of random distribution. This could point to specific road segments or areas with higher accident rates, requiring targeted interventions for traffic safety.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(samples, \"data/samples.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Now run NKDE with the samples argument included\n# kde <- nkde(lines = Road_bmr,                \n#             events = acc_with_roads,         \n#             w = rep(1, nrow(acc_with_roads)), \n#             kernel_name = \"quartic\",         \n#             bw = 500,                       \n#             samples = samples,            \n#             method = \"simple\",              \n#             grid_shape = c(100, 100),         \n#             verbose = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# class(kde)\n# save(kde, file = \"data/kde.Rdata\")\n# saveRDS(kde, file = \"data/kde.rds\")\n```\n:::\n\n\n\nHere is a 3 day handle, so we load the data directly from our save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKDE <- readRDS(\"data/kde.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples$density <- KDE\nlixels$density <- KDE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# rescaling to help the mapping\nsamples$density <- samples$density\nlixels$density <- lixels$density\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_lixels <- lixels[lixels$density > 0, ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(filtered_lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(acc_with_roads)+\n  tm_dots(col = \"black\",\n          size = 0.01)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(Road_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(acc_with_roads)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun <- kfunctions(Filtered_lixels_simple,\n                   car_acc_bangkok,  \n                   start = 0, \n                   end = 2000, \n                   step = 100, \n                   width = 50, \n                   nsim = 50, \n                   resolution = 50,\n                   verbose = FALSE, \n                   conf_int = 0.05,\n                   agg = 10000)\n```\n:::\n\n\n\n# **4. Visual Analysis**\n\n## **4.1 Analysis based on Accident Time with ggplot**\n\nFirst we divide the accident severity based on \"number_of_vichel_involved\", \"number_of_fatalities\" & \"number_of injuries\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_acc_time <- car_acc_time %>%\n  mutate(accident_severity = case_when(\n    number_of_fatalities >= 1 | number_of_injuries >= 10 ~ \"Heavy\",  # Heavy accidents\n    number_of_fatalities == 0 & number_of_injuries > 0 ~ \"Middle\",   # Middle accidents\n    number_of_fatalities == 0 & number_of_injuries == 0 & number_of_vehicles_involved > 0 ~ \"Low\"  # Low accidents\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nheavy_accidents <- car_acc_time %>%\n  filter(accident_severity == \"Heavy\")\n\nmiddle_accidents <- car_acc_time %>%\n  filter(accident_severity == \"Middle\")\n\nlow_accidents <- car_acc_time %>%\n  filter(accident_severity == \"Low\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reorder the accident_severity factor to ensure \"Heavy\" is at the bottom\ncar_acc_time <- car_acc_time %>%\n  mutate(accident_severity = factor(accident_severity, levels = c(\"Low\", \"Middle\", \"Heavy\")))\n\n# Filter out the \"N/A\" values from the data\ncar_acc_time_filtered <- car_acc_time %>%\n  filter(!is.na(accident_severity) & accident_severity != \"N/A\")\n\n# Create the plot\nplot_m <- ggplot(car_acc_time_filtered, aes(x = Month_num, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Traffic Accidents by Severity and Month\",\n       x = \"Month\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\") +\n  scale_x_continuous(breaks = 1:12, labels = month.abb) +  # Display month abbreviations\n  theme_minimal()  # Use a minimal theme for cleaner appearance\n\n# Show the plot\nplot_m\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_acc_time <- car_acc_time %>%\n  mutate(Day_of_week = factor(Day_of_week, levels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\")))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter out the \"N/A\" values from the data\ncar_acc_time_filtered <- car_acc_time %>%\n  filter(!is.na(accident_severity) & accident_severity != \"N/A\")\n\n# Create the plot\nplot_w <- ggplot(car_acc_time_filtered, aes(x = Day_of_week, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  facet_wrap(~ province_en) +\n  labs(title = \"Traffic Accidents by Province and Day of the Week\",\n       x = \"Day of the Week\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\") +\n  theme_minimal()\n\n# Show the plot\nplot_w\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_acc_time <- car_acc_time %>%\n  mutate(hour = format(as.POSIXct(clock, format = \"%H:%M:%S\"), \"%H\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure the 'hour' column is numeric\ncar_acc_time$hour <- as.numeric(car_acc_time$hour)\n\n# Filter out the \"N/A\" values from the data\ncar_acc_time_filtered <- car_acc_time %>%\n  filter(!is.na(accident_severity) & accident_severity != \"N/A\")\n\n# Create the plot\nplot_h <- ggplot(car_acc_time_filtered, aes(x = hour, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Traffic Accidents by Severity and Time of Day\",\n       x = \"Hour of the Day\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\") +\n  scale_x_continuous(breaks = 0:23) +  # Show all hours (0-23)\n  theme_minimal()  # Cleaner look\n\n# Show the plot\nplot_h\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert 'clock' column to POSIXct format and create 'time_of_day' column\ncar_acc_time <- car_acc_time %>%\n  mutate(time_of_day = case_when(\n    hour >= 6 & hour < 18 ~ \"Morning\",  # Between 6 AM and 6 PM is Morning\n    TRUE ~ \"Evening\"                     # Otherwise, it's Evening\n  ))\n\n# Filter out \"N/A\" accident_severity values\ncar_acc_time_filtered <- car_acc_time %>%\n  filter(!is.na(accident_severity) & accident_severity != \"N/A\")\n\n# Create the plot\nplot_mn <- ggplot(car_acc_time_filtered, aes(x = time_of_day, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Traffic Accidents by Severity and Time of Day\",\n       x = \"Time of Day (Morning vs Evening)\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\") +\n  theme_minimal()  # For consistency with other plots\n\n# Show the plot\nplot_mn\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Display the frequency table for 'time_of_day'\ntable(car_acc_time_filtered$time_of_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nEvening Morning \n   5786    7190 \n```\n\n\n:::\n:::\n\n\n\n::: callout-tip\nA traffic safety strategy should focus on rush hour periods in Bangkok, with special attention to reducing the frequency of low and middle severity accidents. Implementing more targeted interventions during peak times and holiday periods, combined with improved traffic management in the most affected areas, can help reduce accident rates and improve road safety.\n:::\n\n## **4.2 Spatio-temporal Analysis**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set tmap mode to \"plot\" for static maps or \"view\" for interactive maps\ntmap_mode(\"plot\")\n\n# Add a new column for 'day_type' to distinguish between weekday and weekend\ncar_acc_time <- car_acc_time %>%\n  mutate(day_type = case_when(\n    Day_of_week %in% c(\"Sat\", \"Sun\") ~ \"Weekend\",\n    TRUE ~ \"Weekday\"\n  ))\n\n# Create a tmap with facets for weekday and weekend, and color for accident severity\ntm_shape(car_acc_time) +\n  tm_dots(col = \"accident_severity\",   \n          palette = c(\"green\", \"yellow\", \"red\"),  \n          size = 0.1,                  \n          alpha = 0.7,                \n          title = \"Accident Severity\") + \n  tm_facets(by = \"day_type\", ncol = 1) +  \n  tm_layout(main.title = \"Accidents by Severity and Day Type\",  \n            main.title.position = \"center\",           \n            main.title.size = 0.8,                    \n            legend.height = 0.45,                      \n            legend.width = 0.35,                       \n            frame = TRUE) +                            \n  tm_compass(type = \"8star\", size = 2) +               \n  tm_scale_bar() +                                     \n  tm_grid(alpha = 0.2) +                               \n  tm_credits(\"Source: Accident data\",                  \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nThis spatial analysis reveals that traffic accidents, especially of low and middle severity, are concentrated along major roads both during weekdays and weekends. Heavy accidents tend to cluster around central or high-traffic areas, necessitating further traffic safety interventions. The distinction between weekdays and weekends suggests that accident frequency is strongly linked to traffic volume, with weekdays showing a higher density of incidents.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}