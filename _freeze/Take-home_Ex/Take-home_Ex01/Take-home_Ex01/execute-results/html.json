{
  "hash": "dcbe0c791fd50891921917e6d99e4164",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home_Ex01\"\nauthor: \"Zou Jiaxun\"\ndate: \"Sep 23, 2024\"\ndata-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n  cache: true\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Click to view code\"\n---\n\n\n\n::: {.alert .alert-dismissible .alert-primary style=\"width: 94%;\"}\n**OH NO!!!**\n\n**There is a collapse after 1 day data processing!!**\n\n**Error: vector memory limit of 16.0 Gb reached, see mem.maxVSize()!!!**\n\n![](Picture/NONONO.png){fig-align=\"center\" width=\"80\" height=\"100\"}\n\n**Important thing to learn, even if shrinking data into 1/30, still try saveRDS!!!**\n:::\n\n# **1 Overview**\n\n## **1.1 Background**\n\nSpatial Point Patterns Analysis (SPPA) has proven to be an effective tool in studying and identifying the factors that contribute to road traffic accidents. Previous research has highlighted its potential, particularly in exploring spatial distributions and correlations. However, much of this research has predominantly concentrated on either behavioral factors (such as driver behavior and road usage) or environmental factors (such as road conditions and weather). Temporal factors—such as seasonal variations, the day of the week, or specific times of day—have received limited attention, despite their potential influence on accident patterns. Addressing these temporal dimensions can offer a more comprehensive understanding of traffic accidents, contributing to more effective prevention strategies.\n\n## **1.2 Objectives**\n\n::: callout-caution\n[Here](https://isss626-ay2024-25aug.netlify.app/take-home_ex01) are the requirement of take-home_Ex01\n:::\n\n# **2 Loading Packages**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spNetwork, tmap, tidyverse, dplyr, spatstat, knitr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\n\n# Create a table with package names and descriptions\npackage_info <- data.frame(\n  Package = c(\"sf\", \"spNetwork\", \"tmap\", \"tidyverse\", \"dplyr\", \"spatstat\"),\n  Description = c(\n    \"For importing, managing, and handling geospatial data\",\n    \"For network-based spatial analysis, including kernel density estimation on networks\",\n    \"For thematic mapping\",\n    \"For non-spatial data wrangling and general data analysis\",\n    \"For data manipulation and pipeline tools\",\n    \"For spatial statistics and point pattern analysis\"\n  )\n)\n\n# Display the table using kable (knitr)\nkable(package_info, col.names = c(\"Package\", \"Description\"))\n```\n\n::: {.cell-output-display}\n\n\n|Package   |Description                                                                         |\n|:---------|:-----------------------------------------------------------------------------------|\n|sf        |For importing, managing, and handling geospatial data                               |\n|spNetwork |For network-based spatial analysis, including kernel density estimation on networks |\n|tmap      |For thematic mapping                                                                |\n|tidyverse |For non-spatial data wrangling and general data analysis                            |\n|dplyr     |For data manipulation and pipeline tools                                            |\n|spatstat  |For spatial statistics and point pattern analysis                                   |\n\n\n:::\n:::\n\n\n\n# **3 Data Preparation**\n\nFor the purpose of this exercise, three basic data sets are needed, they are:\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\nAll of them are spatial data\n\n## **3.1 Import & Preparation**\n\nNow we’re loading both the event (acc), polygon (dm2) and road network (Road). Ensure that each layer is in the same CRS. (P.S. this step will overlap the Kfun, since too many points in the same location)\n\n## acc {.tabset}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List of BMR provinces\nbmr_provinces <- c(\"Bangkok\", \"Nonthaburi\", \"Pathum Thani\", \"Samut Prakan\", \"Nakhon Pathom\", \"Samut Sakhon\")\n\n# Read and process the accident data\ncar_acc <- read_csv('data/Thailand_Road_Accident/thai_road_accident_2019_2022.csv') %>%\n  \n  # Remove rows with missing longitude or latitude\n  filter(!is.na(longitude) & !is.na(latitude)) %>%\n\n  # Filter rows for BMR provinces\n  filter(province_en %in% bmr_provinces) %>%\n  \n  # Create new columns\n  mutate(Month_num = month(incident_datetime),\n         Month_fac = month(incident_datetime, label = TRUE, abbr = TRUE),\n         Day = day(incident_datetime),\n         Day_of_week = wday(incident_datetime, label = TRUE),\n         incident_datetime = ymd_hms(incident_datetime),\n         clock = format(incident_datetime, \"%H:%M:%S\")) %>%\n  \n  # Convert to an sf object\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%\n  \n  # Reproject to UTM Zone 47N (for Thailand)\n  st_transform(crs = 32647)\n\n  # add later time analysis car_acc_time\ncar_acc_time <- car_acc\n  \ncar_acc <- car_acc_time %>%\n  select(1, 5, 17:22)\n\ncar_acc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 12986 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 12,986 × 8\n   acc_code province_en   Month_num Month_fac   Day Day_of_week clock   \n      <dbl> <chr>             <dbl> <ord>     <int> <ord>       <chr>   \n 1   571882 Nakhon Pathom         1 Jan           1 Tue         02:25:00\n 2   600001 Nonthaburi            1 Jan           1 Tue         03:00:00\n 3   605043 Samut Prakan          1 Jan           1 Tue         03:00:00\n 4   629691 Bangkok               1 Jan           1 Tue         03:05:00\n 5   571887 Nakhon Pathom         1 Jan           1 Tue         04:30:00\n 6   599234 Samut Prakan          1 Jan           1 Tue         04:45:00\n 7   599990 Samut Sakhon          1 Jan           1 Tue         05:30:00\n 8   612045 Nonthaburi            1 Jan           1 Tue         05:30:00\n 9   629689 Bangkok               1 Jan           1 Tue         05:42:00\n10   607046 Pathum Thani          1 Jan           1 Tue         06:30:00\n# ℹ 12,976 more rows\n# ℹ 1 more variable: geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n\n\n## adm2 {.tabset}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load administrative boundaries (adm2 level)\nadm2 <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp\", layer = \"tha_admbnda_adm2_rtsd_20220121\") %>%\n  st_transform(adm2, crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `/Applications/SMU/S3/ISSS-626/ISSS-626 ZOUJIAXUN/Take-home_Ex/Take-home_Ex01/data/tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nadm2_time <- adm2\nadm2 <- adm2_time %>%\n  select(1:2,11,20)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter administrative boundaries for BMR provinces\nbmr_boundaries <- adm2 %>%\n  filter(ADM1_EN %in% bmr_provinces)\nbmr_boundaries\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 79 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 587893.5 ymin: 1484414 xmax: 712440.5 ymax: 1579076\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n   Shape_Leng   Shape_Area ADM1_EN                       geometry\n1  0.08541733 0.0004504685 Bangkok MULTIPOLYGON (((662263.2 15...\n2  0.13413177 0.0009501914 Bangkok MULTIPOLYGON (((664304.4 15...\n3  0.67634217 0.0198588627 Bangkok MULTIPOLYGON (((706774.6 15...\n4  0.08588647 0.0003369561 Bangkok MULTIPOLYGON (((664040.2 15...\n5  0.30172202 0.0034149298 Bangkok MULTIPOLYGON (((673966.4 15...\n6  0.30869124 0.0023032680 Bangkok MULTIPOLYGON (((676080.6 15...\n7  0.11532413 0.0006716417 Bangkok MULTIPOLYGON (((664236.5 15...\n8  0.06166921 0.0002089751 Bangkok MULTIPOLYGON (((663880.5 15...\n9  0.15667242 0.0011024083 Bangkok MULTIPOLYGON (((674748.8 15...\n10 0.39734629 0.0050495791 Bangkok MULTIPOLYGON (((694735.5 15...\n```\n\n\n:::\n:::\n\n\n\n## Road {.tabset}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Load road network\n# Road <- st_read(dsn = \"data/hotosm_tha_roads_lines_shp\", layer = \"hotosm_tha_roads_lines_shp\") %>%\n#     st_set_crs(4326) %>%  # Assign CRS if it's missing\n#     st_transform(Road, crs = 32647)\nRoad <- readRDS(\"data/Road.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(Road, file = \"data/Road\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Filter the road network to only include roads in the BMR area\n# Road_bmr <- st_intersection(Road, bmr_boundaries)\nRoad_bmr <- readRDS(\"data/Road_bmr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nRoad_bmr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 590257 features and 17 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 587921 ymin: 1484439 xmax: 712417 ymax: 1579041\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n                  name                  name_en        highway surface\n2698       ซอยประตูนกยูง        Soi Pratu Nokyung    residential    <NA>\n2708              <NA>                     <NA>        footway    <NA>\n2709              <NA>                     <NA>        footway    <NA>\n10903             <NA>                     <NA> secondary_link    <NA>\n10909       ถนนจักรเพชร         Chakkraphet Road      secondary    <NA>\n10910        ถนนอัษฎางค์            Atsadang Road       tertiary asphalt\n43868             <NA>                     <NA>           path    <NA>\n54889 ซอยดำเนินกลางเหนือ   Soi Damnoen Klang Nuea    residential    <NA>\n61941             <NA>                     <NA>        footway    <NA>\n62066  ถนนราชดำเนินกลาง Ratchadamnoen Klang Road        primary asphalt\n      smoothness width lanes oneway bridge layer source          name_th\n2698        <NA>  <NA>  <NA>   <NA>   <NA>  <NA>   <NA>      ซอยประตูนกยูง\n2708        <NA>  <NA>  <NA>   <NA>   <NA>  <NA>   <NA>             <NA>\n2709        <NA>  <NA>  <NA>   <NA>   <NA>  <NA>   <NA>             <NA>\n10903       <NA>  <NA>  <NA>    yes   <NA>  <NA>   <NA>             <NA>\n10909       <NA>  <NA>  <NA>    yes   <NA>  <NA>   <NA>       ถนนจักรเพชร\n10910       <NA>  <NA>  <NA>    yes   <NA>  <NA>   <NA>        ถนนอัษฎางค์\n43868       <NA>  <NA>  <NA>   <NA>   <NA>  <NA>   <NA>             <NA>\n54889       <NA>  <NA>     1   <NA>   <NA>  <NA>   <NA> ซอยดำเนินกลางเหนือ\n61941       <NA>  <NA>  <NA>   <NA>   <NA>  <NA>   <NA>             <NA>\n62066       <NA>  <NA>     6    yes   <NA>  <NA>   <NA>  ถนนราชดำเนินกลาง\n          osm_id  osm_type Shape_Leng   Shape_Area ADM1_EN\n2698    94451244 ways_line 0.08541733 0.0004504685 Bangkok\n2708  1264028727 ways_line 0.08541733 0.0004504685 Bangkok\n2709  1264028728 ways_line 0.08541733 0.0004504685 Bangkok\n10903 1311447474 ways_line 0.08541733 0.0004504685 Bangkok\n10909  157690710 ways_line 0.08541733 0.0004504685 Bangkok\n10910  157690718 ways_line 0.08541733 0.0004504685 Bangkok\n43868  661757287 ways_line 0.08541733 0.0004504685 Bangkok\n54889 1278444254 ways_line 0.08541733 0.0004504685 Bangkok\n61941  234738751 ways_line 0.08541733 0.0004504685 Bangkok\n62066   24681047 ways_line 0.08541733 0.0004504685 Bangkok\n                            geometry\n2698  LINESTRING (661237.9 151999...\n2708  LINESTRING (661230.6 151997...\n2709  LINESTRING (661234.5 151996...\n10903 LINESTRING (661640.9 151977...\n10909 LINESTRING (661650.9 151977...\n10910 LINESTRING (661650.9 151977...\n43868 LINESTRING (661858.2 152023...\n54889 LINESTRING (661987.5 152147...\n61941 LINESTRING (661919 1521589,...\n62066 LINESTRING (662408.2 152133...\n```\n\n\n:::\n:::\n\n\n\n# 4 Visualize Accident Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize accident points\ntmap_mode(\"plot\")\ntm_shape(car_acc) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## 4.1 Spatial Join Accidents to Road Network\n\nNow we can use st_nearest_feature() to join the accident points with the nearest road segments from the road network. (This will cause the increaing same location point, don't try)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join accidents to the nearest road segment\nacc_with_roads <- st_join(car_acc, Road_bmr, join = st_nearest_feature)\n\n# Check the joined data\nprint(acc_with_roads)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 12986 features and 24 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 12,986 × 25\n   acc_code province_en   Month_num Month_fac   Day Day_of_week clock   \n *    <dbl> <chr>             <dbl> <ord>     <int> <ord>       <chr>   \n 1   571882 Nakhon Pathom         1 Jan           1 Tue         02:25:00\n 2   600001 Nonthaburi            1 Jan           1 Tue         03:00:00\n 3   605043 Samut Prakan          1 Jan           1 Tue         03:00:00\n 4   629691 Bangkok               1 Jan           1 Tue         03:05:00\n 5   571887 Nakhon Pathom         1 Jan           1 Tue         04:30:00\n 6   599234 Samut Prakan          1 Jan           1 Tue         04:45:00\n 7   599990 Samut Sakhon          1 Jan           1 Tue         05:30:00\n 8   612045 Nonthaburi            1 Jan           1 Tue         05:30:00\n 9   629689 Bangkok               1 Jan           1 Tue         05:42:00\n10   607046 Pathum Thani          1 Jan           1 Tue         06:30:00\n# ℹ 12,976 more rows\n# ℹ 18 more variables: geometry <POINT [m]>, name <chr>, name_en <chr>,\n#   highway <chr>, surface <chr>, smoothness <chr>, width <chr>, lanes <chr>,\n#   oneway <chr>, bridge <chr>, layer <chr>, source <chr>, name_th <chr>,\n#   osm_id <dbl>, osm_type <chr>, Shape_Leng <dbl>, Shape_Area <dbl>,\n#   ADM1_EN <chr>\n```\n\n\n:::\n:::\n\n\n\n## 4.2 Network-Based Analysis with spNetwork\n\nNow we can perform network-based spatial analysis, like kernel density estimation (KDE) along the road network. The spNetwork package is useful for this type of analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Convert generic geometries to LINESTRING\n# Road_bmr <- st_cast(Road_bmr, \"LINESTRING\")\nRoad_bmr <- readRDS(\"data/Road_bmr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# lixels <- lixelize_lines(Road_bmr, \n#                          2000, \n#                          mindist = 1000)\nlixels <- readRDS(\"data/lixels.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- lines_center(lixels) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(samples, \"data/samples.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Now run NKDE with the samples argument included\n# kde <- nkde(lines = Road_bmr,                \n#             events = acc_with_roads,         \n#             w = rep(1, nrow(acc_with_roads)), \n#             kernel_name = \"quartic\",         \n#             bw = 500,                       \n#             samples = samples,            \n#             method = \"simple\",              \n#             grid_shape = c(100, 100),         \n#             verbose = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# class(kde)\n# save(kde, file = \"data/kde.Rdata\")\n# saveRDS(kde, file = \"data/kde.rds\")\n```\n:::\n\n\n\nHere is a 3 day handle, so we load the data directly from our save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKDE <- readRDS(\"data/kde.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples$density <- KDE\nlixels$density <- KDE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# rescaling to help the mapping\nsamples$density <- samples$density\nlixels$density <- lixels$density\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_lixels <- lixels[lixels$density > 0, ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(filtered_lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(acc_with_roads)+\n  tm_dots(col = \"black\",\n          size = 0.01)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(Road_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(acc_with_roads)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(filtered_lixels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"lineID\"     \"name\"       \"name_en\"    \"highway\"    \"surface\"   \n [6] \"smoothness\" \"width\"      \"lanes\"      \"oneway\"     \"bridge\"    \n[11] \"layer\"      \"source\"     \"name_th\"    \"osm_id\"     \"osm_type\"  \n[16] \"Shape_Leng\" \"Shape_Area\" \"ADM1_EN\"    \"geometry\"   \"density\"   \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the rows where 'ADM1_EN' is \"Bangkok\"\nFiltered_lixels_simple <- filtered_lixels[filtered_lixels$ADM1_EN == \"Bangkok\", ]\n\n# Select only columns 1 to 14 and column 20\nFiltered_lixels_simple <- Filtered_lixels_simple[, c(1, 14:20)]\n\n# Check the result\nhead(Filtered_lixels_simple)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 7 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 664396.5 ymin: 1521369 xmax: 665939.1 ymax: 1525313\nProjected CRS: WGS 84 / UTM zone 47N\n     lineID     osm_id  osm_type Shape_Leng   Shape_Area ADM1_EN\n2454   2454   32036743 ways_line  0.1341318 0.0009501914 Bangkok\n2473   2473 1059569203 ways_line  0.1341318 0.0009501914 Bangkok\n2609   2609  864040937 ways_line  0.1341318 0.0009501914 Bangkok\n2626   2626 1059569204 ways_line  0.1341318 0.0009501914 Bangkok\n2694   2694  175807253 ways_line  0.1341318 0.0009501914 Bangkok\n2808   2808 1038307916 ways_line  0.1341318 0.0009501914 Bangkok\n                           geometry      density\n2454 LINESTRING (664427 1521369,... 6.112661e-08\n2473 LINESTRING (665917.7 152531... 1.801466e-06\n2609 LINESTRING (664948.3 152286... 2.017165e-07\n2626 LINESTRING (665915.4 152530... 1.402174e-06\n2694 LINESTRING (665885.3 152522... 6.145220e-07\n2808 LINESTRING (664427.9 152136... 1.295446e-07\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter rows where 'ADM1_EN' is \"Bangkok\"\ncar_acc_bangkok <- car_acc %>%\n  filter(province_en == \"Bangkok\")\n\n# View the filtered dataset\nhead(car_acc_bangkok)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 645371.9 ymin: 1506578 xmax: 684102 ymax: 1525144\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 8\n  acc_code province_en Month_num Month_fac   Day Day_of_week clock   \n     <dbl> <chr>           <dbl> <ord>     <int> <ord>       <chr>   \n1   629691 Bangkok             1 Jan           1 Tue         03:05:00\n2   629689 Bangkok             1 Jan           1 Tue         05:42:00\n3   604307 Bangkok             1 Jan           1 Tue         10:10:00\n4  3793736 Bangkok             1 Jan           1 Tue         17:30:00\n5   599070 Bangkok             1 Jan           1 Tue         19:20:00\n6   613605 Bangkok             1 Jan           1 Tue         21:40:00\n# ℹ 1 more variable: geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find exact duplicates based on the geometry (coordinates)\nduplicates <- car_acc_bangkok[duplicated(car_acc_bangkok$geometry), ]\n\n# View the duplicated points\nprint(duplicates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 777 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 645482.1 ymin: 1506204 xmax: 708415.7 ymax: 1541237\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 777 × 8\n   acc_code province_en Month_num Month_fac   Day Day_of_week clock   \n      <dbl> <chr>           <dbl> <ord>     <int> <ord>       <chr>   \n 1   629689 Bangkok             1 Jan           1 Tue         05:42:00\n 2   629711 Bangkok             1 Jan           2 Wed         10:07:00\n 3   629713 Bangkok             1 Jan           2 Wed         10:33:00\n 4   629701 Bangkok             1 Jan           2 Wed         11:46:00\n 5   629722 Bangkok             1 Jan           4 Fri         08:01:00\n 6   629729 Bangkok             1 Jan           4 Fri         09:01:00\n 7   629718 Bangkok             1 Jan           4 Fri         09:46:00\n 8   629724 Bangkok             1 Jan           4 Fri         11:23:00\n 9   629720 Bangkok             1 Jan           4 Fri         16:36:00\n10   629733 Bangkok             1 Jan           5 Sat         12:25:00\n# ℹ 767 more rows\n# ℹ 1 more variable: geometry <POINT [m]>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Optionally, count how many duplicates there are\nnum_duplicates <- nrow(duplicates)\nprint(paste(\"Number of duplicate points:\", num_duplicates))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of duplicate points: 777\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find which points are within 50 meters of each other\nclose_points <- st_is_within_distance(car_acc_bangkok, dist = 50)\n\n# View the list of indices where points are near each other\nprint(close_points)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSparse geometry binary predicate list of length 6089, where the\npredicate was `is_within_distance'\nfirst 10 elements:\n 1: 1, 2, 3895\n 2: 1, 2, 3895\n 3: 3, 4813, 4849, 5826\n 4: 4, 352, 1487, 1535, 1558, 3333\n 5: 5, 10, 13, 729, 762, 1018, 1038, 1128, 1129, 1259, ...\n 6: 6, 355, 3464, 5058, 5537, 5808\n 7: 7\n 8: 8, 2043, 3939, 4942, 5353\n 9: 9\n 10: 5, 10, 13, 443, 729, 762, 1018, 1038, 1128, 1129, ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Optionally, create a summary to see how many points have close neighbors\nnum_close_points <- sum(lengths(close_points) > 1)\nprint(paste(\"Number of points with close neighbors:\", num_close_points))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of points with close neighbors: 5317\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\npoints_with_neighbors <- which(lengths(close_points) > 1)\n\n# Plot all points\nggplot() +\n  geom_sf(data = acc_with_roads, color = \"blue\") +\n  geom_sf(data = acc_with_roads[points_with_neighbors, ], color = \"red\", size = 2) +\n  ggtitle(\"Red points represent those with neighbors within 50 meters\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(st_geometry_type(car_acc_bangkok),10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] POINT POINT POINT POINT POINT POINT POINT POINT POINT POINT\n18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract the coordinates from acc_with_roads\ncoords <- st_coordinates(car_acc_bangkok)\n\n# View the first few coordinates\nhead(coords)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            X       Y\n[1,] 674117.8 1525144\n[2,] 674117.8 1525144\n[3,] 650504.9 1506578\n[4,] 645371.9 1524720\n[5,] 648570.4 1524555\n[6,] 684102.0 1520421\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dbscan)\n\n# Apply DBSCAN clustering on the point coordinates (e.g., eps = 50 meters)\ndb_clusters <- dbscan(coords, eps = 10, minPts = 2)\n\n# Add cluster results back to the sf object\ncar_acc_bangkok$cluster <- db_clusters$cluster\n\n# Group points by cluster and merge them\nacc_with_roads_merged <- car_acc_bangkok %>%\n  group_by(cluster) %>%\n  summarise(geometry = st_union(geometry)) %>%\n  ungroup()\n# View the updated dataset\nhead(acc_with_roads)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 24 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 627012.3 ymin: 1502876 xmax: 693488.9 ymax: 1533381\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 25\n  acc_code province_en   Month_num Month_fac   Day Day_of_week clock   \n     <dbl> <chr>             <dbl> <ord>     <int> <ord>       <chr>   \n1   571882 Nakhon Pathom         1 Jan           1 Tue         02:25:00\n2   600001 Nonthaburi            1 Jan           1 Tue         03:00:00\n3   605043 Samut Prakan          1 Jan           1 Tue         03:00:00\n4   629691 Bangkok               1 Jan           1 Tue         03:05:00\n5   571887 Nakhon Pathom         1 Jan           1 Tue         04:30:00\n6   599234 Samut Prakan          1 Jan           1 Tue         04:45:00\n# ℹ 18 more variables: geometry <POINT [m]>, name <chr>, name_en <chr>,\n#   highway <chr>, surface <chr>, smoothness <chr>, width <chr>, lanes <chr>,\n#   oneway <chr>, bridge <chr>, layer <chr>, source <chr>, name_th <chr>,\n#   osm_id <dbl>, osm_type <chr>, Shape_Leng <dbl>, Shape_Area <dbl>,\n#   ADM1_EN <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun <- kfunctions(Filtered_lixels_simple,\n                   car_acc_bangkok,  # Use the dataset with cluster assignments if clustering was applied\n                   start = 0, \n                   end = 2000, \n                   step = 100, \n                   width = 50, \n                   nsim = 50, \n                   resolution = 50,\n                   verbose = FALSE, \n                   conf_int = 0.05,\n                   agg = 10000)\n```\n:::\n\n\n\n# 5. Temporal\n\n## **5.1 Regional Vision**\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of acc by using *qtm()* of **tmap** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_data <- st_join(car_acc_time, adm2_time, join = st_within)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adjust the basemap to use tm_dots() for point data\nbasemap <- tm_shape(adm2_time) +\n  tm_polygons() + \n  tm_text(\"ADM2_EN\", size = 0.5)\n\n# Create the fatalities map\nfatalities <- qtm(joined_data, \"number_of_fatalities\")\n\n# Arrange the maps side by side\ntmap_arrange(basemap, fatalities, asp = 1, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n## **5.2 Converting the generic sp format into spatstat’s ppp format**\n\nNow, we will use *as.ppp()* function of **spatstat** to convert the spatial data into **spatstat**’s ***ppp*** object format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_ppp <- as.ppp(car_acc_time)\nacc_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 12986 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n```\n\n\n:::\n:::\n\n\n\nNow, let us plot ***acc_ppp*** and examine the different.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(acc_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n## **5.3 Handling duplicated points**\n\nWe can check the duplication in a ***ppp*** object by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(acc_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\nTo count the number of co-indicence point, we will use the *multiplicity()* function as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(multiplicity(acc_ppp),10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 1 1 1 1 1 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(multiplicity(acc_ppp) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_owin <- as.owin(bmr_boundaries)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(bmr_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n## **5.6 Combining point events object and owin object**\n\nIn this last step of geospatial data wrangling, we will extract acc events that are located within bmr by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccbmr_ppp = acc_ppp[bmr_owin]\nplot(accbmr_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n## **5.7 Kernel Density Estimation**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_accbmr_bw <- density(accbmr_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nplot(kde_accbmr_bw)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\nSince the plot is too dark, we will use rescale.ppp()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigma_value <- 1000  # Adjust this value based on your smoothing preference\n\naccbmr_ppp.km <- rescale.ppp(accbmr_ppp, 1000, \"km\")\n\nkde_accbmr_bw <- density(accbmr_ppp.km, sigma=sigma_value, edge=TRUE, kernel=\"gaussian\")\n\nplot(kde_accbmr_bw)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nThe KDE map shows that car accidents are concentrated in specific high-risk areas, especially in the eastern region, where accident density is higher. In contrast, the western areas have fewer accidents. This map helps identify where safety improvements, such as better road design or enforcement, are most needed to reduce accidents in the most affected zones.\n:::\n\n## 5.8 Analysis based on Accident Time\n\nFirst we divide the accident severity based on \"number_of_vichel_involved\", \"number_of_fatalities\" & \"number_of injuries\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_acc_time <- car_acc_time %>%\n  mutate(accident_severity = case_when(\n    number_of_fatalities >= 1 | number_of_injuries >= 10 ~ \"Heavy\",  # Heavy accidents\n    number_of_fatalities == 0 & number_of_injuries > 0 ~ \"Middle\",   # Middle accidents\n    number_of_fatalities == 0 & number_of_injuries == 0 & number_of_vehicles_involved > 0 ~ \"Low\"  # Low accidents\n  ))\n\n# Check the result\nprint(car_acc_time %>% select(number_of_fatalities, number_of_injuries, number_of_vehicles_involved, accident_severity))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 12986 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 12,986 × 5\n   number_of_fatalities number_of_injuries number_of_vehicles_involved\n                  <dbl>              <dbl>                       <dbl>\n 1                    0                  2                           1\n 2                    0                  1                           1\n 3                    0                  0                           2\n 4                    0                  1                           1\n 5                    0                  1                           1\n 6                    1                  0                           1\n 7                    1                  0                           1\n 8                    0                  0                           1\n 9                    0                  0                           1\n10                    0                  1                           1\n# ℹ 12,976 more rows\n# ℹ 2 more variables: accident_severity <chr>, geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for heavy accidents\nheavy_accidents <- car_acc_time %>%\n  filter(accident_severity == \"Heavy\")\n\n# Filter for middle accidents\nmiddle_accidents <- car_acc_time %>%\n  filter(accident_severity == \"Middle\")\n\n# Filter for low accidents\nlow_accidents <- car_acc_time %>%\n  filter(accident_severity == \"Low\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check unique values of accident_severity to verify if \"Middle\" exists\nunique(car_acc_time$accident_severity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Middle\" \"Low\"    \"Heavy\"  NA      \n```\n\n\n:::\n\n```{.r .cell-code}\n# Check rows where accident_severity is N/A\nna_rows <- car_acc_time %>%\n  filter(is.na(accident_severity))\n\nprint(na_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 10 features and 22 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 629650.3 ymin: 1506187 xmax: 699308.5 ymax: 1559319\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 10 × 23\n   acc_code incident_datetime   report_datetime     province_th  province_en \n *    <dbl> <dttm>              <dttm>              <chr>        <chr>       \n 1  3837875 2021-04-04 04:30:00 2021-04-11 20:12:00 ปทุมธานี       Pathum Thani\n 2  4995686 2021-05-28 22:00:00 2021-10-14 15:13:00 สมุทรสาคร     Samut Sakhon\n 3  4837299 2021-08-04 14:44:00 2021-09-17 07:54:00 สมุทรปราการ   Samut Prakan\n 4  4837405 2021-09-10 16:56:00 2021-09-17 07:58:00 กรุงเทพมหานคร Bangkok     \n 5  4931496 2021-09-30 12:00:00 2021-10-03 10:30:00 กรุงเทพมหานคร Bangkok     \n 6  5377382 2021-12-15 18:50:00 2021-12-17 15:36:00 กรุงเทพมหานคร Bangkok     \n 7  7332590 2022-11-05 18:50:00 2022-11-05 18:50:00 กรุงเทพมหานคร Bangkok     \n 8  7476811 2022-12-20 14:56:00 2022-12-21 11:57:00 กรุงเทพมหานคร Bangkok     \n 9  7476920 2022-12-21 11:21:00 2022-12-21 11:31:00 กรุงเทพมหานคร Bangkok     \n10  7476799 2022-12-21 11:55:00 2022-12-21 11:55:00 กรุงเทพมหานคร Bangkok     \n# ℹ 18 more variables: agency <chr>, route <chr>, vehicle_type <chr>,\n#   presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, road_description <chr>,\n#   slope_description <chr>, Month_num <dbl>, Month_fac <ord>, Day <int>,\n#   Day_of_week <ord>, clock <chr>, geometry <POINT [m]>,\n#   accident_severity <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reorder the accident_severity factor to ensure \"Heavy\" is at the bottom\ncar_acc_time <- car_acc_time %>%\n  mutate(accident_severity = factor(accident_severity, levels = c(\"N/A\", \"Low\", \"Middle\", \"Heavy\")))\n\nlevels(car_acc_time$accident_severity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"N/A\"    \"Low\"    \"Middle\" \"Heavy\" \n```\n\n\n:::\n\n```{.r .cell-code}\nplot_m <- ggplot(car_acc_time, aes(x = Month_num, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Traffic Accidents by Severity and Month\",\n       x = \"Month\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\") +\n  scale_x_continuous(breaks = 1:12, labels = month.abb) +  # Display month abbreviations\n  theme_minimal()  # Use a minimal theme for cleaner appearance\nplot_m\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure Day_of_week is an ordered factor (starting from Monday)\ncar_acc_time <- car_acc_time %>%\n  mutate(Day_of_week = factor(Day_of_week, levels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\")))\n\n# Verify the levels\nlevels(car_acc_time$Day_of_week)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Mon\" \"Tue\" \"Wed\" \"Thu\" \"Fri\" \"Sat\" \"Sun\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_w <- ggplot(car_acc_time, aes(x = Day_of_week, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Traffic Accidents by Severity and Day of the Week\",\n       x = \"Day of the Week\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\") +\n  theme_minimal()  # Cleaner appearance\nplot_w\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract just the hour from the clock column (assuming clock is in HH:MM:SS format)\ncar_acc_time <- car_acc_time %>%\n  mutate(hour = format(as.POSIXct(clock, format = \"%H:%M:%S\"), \"%H\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure the 'hour' column is numeric\ncar_acc_time$hour <- as.numeric(car_acc_time$hour)\n\nplot_h <- ggplot(car_acc_time, aes(x = hour, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Traffic Accidents by Severity and Time of Day\",\n       x = \"Hour of the Day\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\") +\n  scale_x_continuous(breaks = 0:23) +  # Show all hours (0-23)\n  theme_minimal()  # Cleaner look\nplot_h\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the clock to POSIXct format and classify into Morning and Evening\ncar_acc_time <- car_acc_time %>%\n  mutate(time_of_day = case_when(\n    format(as.POSIXct(clock, format = \"%H:%M:%S\"), \"%H\") >= \"06\" & \n    format(as.POSIXct(clock, format = \"%H:%M:%S\"), \"%H\") < \"18\" ~ \"Morning\",\n    \n    TRUE ~ \"Evening\"\n  ))\n\n# Verify the new time_of_day column\ntable(car_acc_time$time_of_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nEvening Morning \n   5790    7196 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_mn <- ggplot(car_acc_time, aes(x = time_of_day, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Traffic Accidents by Severity and Time of Day\",\n       x = \"Time of Day (Morning vs Evening)\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\") +\n  theme_minimal()  # For consistency with other plots\nplot_mn\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n\nSince there is no obvious",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}