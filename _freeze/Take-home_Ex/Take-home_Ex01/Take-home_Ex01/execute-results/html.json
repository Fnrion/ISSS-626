{
  "hash": "7c9b0008f0aa39898f5d4b0529e53813",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home_Ex01\"\nauthor: \"Zou Jiaxun\"\ndate: \"Sep 23, 2024\"\ndata-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n  cache: true\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Click to view code\"\n---\n\n\n\n::: {.alert .alert-dismissible .alert-primary style=\"width: 94%;\"}\n**OH NO!!!**\n\n**There is a collapse after 1 day data processing!!**\n\n**Error: vector memory limit of 16.0 Gb reached, see mem.maxVSize()!!!**\n\n![](Picture/NONONO.png){fig-align=\"center\" width=\"80\" height=\"100\"}\n\n**Important thing to learn, even if shrinking data into 1/30, still try saveRDS!!!**\n:::\n\n# **1 Overview**\n\n## **1.1 Background**\n\nSpatial Point Patterns Analysis (SPPA) has proven to be an effective tool in studying and identifying the factors that contribute to road traffic accidents. Previous research has highlighted its potential, particularly in exploring spatial distributions and correlations. However, much of this research has predominantly concentrated on either behavioral factors (such as driver behavior and road usage) or environmental factors (such as road conditions and weather). Temporal factors—such as seasonal variations, the day of the week, or specific times of day—have received limited attention, despite their potential influence on accident patterns. Addressing these temporal dimensions can offer a more comprehensive understanding of traffic accidents, contributing to more effective prevention strategies.\n\n## **1.2 Objectives**\n\n::: callout-caution\n[Here](https://isss626-ay2024-25aug.netlify.app/take-home_ex01) are the requirement of take-home_Ex01\n:::\n\n# **2 Loading Packages**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spNetwork, tmap, tidyverse, dplyr, spatstat, knitr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\n\n# Create a table with package names and descriptions\npackage_info <- data.frame(\n  Package = c(\"sf\", \"spNetwork\", \"tmap\", \"tidyverse\", \"dplyr\", \"spatstat\"),\n  Description = c(\n    \"For importing, managing, and handling geospatial data\",\n    \"For network-based spatial analysis, including kernel density estimation on networks\",\n    \"For thematic mapping\",\n    \"For non-spatial data wrangling and general data analysis\",\n    \"For data manipulation and pipeline tools\",\n    \"For spatial statistics and point pattern analysis\"\n  )\n)\n\n# Display the table using kable (knitr)\nkable(package_info, col.names = c(\"Package\", \"Description\"))\n```\n\n::: {.cell-output-display}\n\n\n|Package   |Description                                                                         |\n|:---------|:-----------------------------------------------------------------------------------|\n|sf        |For importing, managing, and handling geospatial data                               |\n|spNetwork |For network-based spatial analysis, including kernel density estimation on networks |\n|tmap      |For thematic mapping                                                                |\n|tidyverse |For non-spatial data wrangling and general data analysis                            |\n|dplyr     |For data manipulation and pipeline tools                                            |\n|spatstat  |For spatial statistics and point pattern analysis                                   |\n\n\n:::\n:::\n\n\n\n# **3 Data Preparation**\n\nFor the purpose of this exercise, three basic data sets are needed, they are:\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\nAll of them are spatial data\n\n## **3.1 Import & Preparation**\n\nNow we’re loading both the event (acc), polygon (dm2) and road network (Road). Ensure that each layer is in the same CRS. (P.S. this step will overlap the Kfun, since too many points in the same location)\n\n## acc {.tabset}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List of BMR provinces\nbmr_provinces <- c(\"Bangkok\", \"Nonthaburi\", \"Pathum Thani\", \"Samut Prakan\", \"Nakhon Pathom\", \"Samut Sakhon\")\n\n# Read and process the accident data\ncar_acc <- read_csv('data/Thailand_Road_Accident/thai_road_accident_2019_2022.csv') %>%\n  \n  # Remove rows with missing longitude or latitude\n  filter(!is.na(longitude) & !is.na(latitude)) %>%\n\n  # Filter rows for BMR provinces\n  filter(province_en %in% bmr_provinces) %>%\n  \n  # Create new columns\n  mutate(Month_num = month(incident_datetime),\n         Month_fac = month(incident_datetime, label = TRUE, abbr = TRUE),\n         Day = day(incident_datetime),\n         Day_of_week = wday(incident_datetime, label = TRUE),\n         incident_datetime = ymd_hms(incident_datetime),\n         clock = format(incident_datetime, \"%H:%M:%S\")) %>%\n  \n  # Convert to an sf object\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%\n  \n  # Reproject to UTM Zone 47N (for Thailand)\n  st_transform(crs = 32647)\n\n  # add later time analysis car_acc_time\ncar_acc_time <- car_acc\n  \ncar_acc <- car_acc_time %>%\n  select(1, 5, 17:22)\n```\n:::\n\n\n\n## dm2 {.tabset}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load administrative boundaries (adm2 level)\nadm2 <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp\", layer = \"tha_admbnda_adm2_rtsd_20220121\") %>%\n  st_transform(adm2, crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `/Applications/SMU/S3/ISSS-626/ISSS-626 ZOUJIAXUN/Take-home_Ex/Take-home_Ex01/data/tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nadm2_time <- adm2\nadm2 <- adm2_time %>%\n  select(1:2,11,20)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter administrative boundaries for BMR provinces\nbmr_boundaries <- adm2 %>%\n  filter(ADM1_EN %in% bmr_provinces)\n```\n:::\n\n\n\n## Road {.tabset}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Load road network\n# Road <- st_read(dsn = \"data/hotosm_tha_roads_lines_shp\", layer = \"hotosm_tha_roads_lines_shp\") %>%\n#     st_set_crs(4326) %>%  # Assign CRS if it's missing\n#     st_transform(Road, crs = 32647)\nRoad <- readRDS(\"data/Road.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(Road, file = \"data/Road\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Filter the road network to only include roads in the BMR area\n# Road_bmr <- st_intersection(Road, bmr_boundaries)\nRoad_bmr <- readRDS(\"data/Road_bmr.rds\")\n```\n:::\n\n\n\n## 3.2 Visualize Accident Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize accident points\ntmap_mode(\"plot\")\ntm_shape(car_acc) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## 3.3 Spatial Join Accidents to Road Network\n\nNow we can use st_nearest_feature() to join the accident points with the nearest road segments from the road network.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join accidents to the nearest road segment\nacc_with_roads <- st_join(car_acc, Road_bmr, join = st_nearest_feature)\n\n# Check the joined data\nprint(acc_with_roads)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 12986 features and 24 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 12,986 × 25\n   acc_code province_en   Month_num Month_fac   Day Day_of_week clock   \n *    <dbl> <chr>             <dbl> <ord>     <int> <ord>       <chr>   \n 1   571882 Nakhon Pathom         1 Jan           1 Tue         02:25:00\n 2   600001 Nonthaburi            1 Jan           1 Tue         03:00:00\n 3   605043 Samut Prakan          1 Jan           1 Tue         03:00:00\n 4   629691 Bangkok               1 Jan           1 Tue         03:05:00\n 5   571887 Nakhon Pathom         1 Jan           1 Tue         04:30:00\n 6   599234 Samut Prakan          1 Jan           1 Tue         04:45:00\n 7   599990 Samut Sakhon          1 Jan           1 Tue         05:30:00\n 8   612045 Nonthaburi            1 Jan           1 Tue         05:30:00\n 9   629689 Bangkok               1 Jan           1 Tue         05:42:00\n10   607046 Pathum Thani          1 Jan           1 Tue         06:30:00\n# ℹ 12,976 more rows\n# ℹ 18 more variables: geometry <POINT [m]>, name <chr>, name_en <chr>,\n#   highway <chr>, surface <chr>, smoothness <chr>, width <chr>, lanes <chr>,\n#   oneway <chr>, bridge <chr>, layer <chr>, source <chr>, name_th <chr>,\n#   osm_id <dbl>, osm_type <chr>, Shape_Leng <dbl>, Shape_Area <dbl>,\n#   ADM1_EN <chr>\n```\n\n\n:::\n:::\n\n\n\n## 3.4 Network-Based Analysis with spNetwork\n\nNow we can perform network-based spatial analysis, like kernel density estimation (KDE) along the road network. The spNetwork package is useful for this type of analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Convert generic geometries to LINESTRING\n# Road_bmr <- st_cast(Road_bmr, \"LINESTRING\")\nRoad_bmr <- readRDS(\"data/Road_bmr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# lixels <- lixelize_lines(Road_bmr, \n#                          2000, \n#                          mindist = 1000)\nlixels <- readRDS(\"data/lixels.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- lines_center(lixels) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(samples, \"data/samples.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Now run NKDE with the samples argument included\n# kde <- nkde(lines = Road_bmr,                \n#             events = acc_with_roads,         \n#             w = rep(1, nrow(acc_with_roads)), \n#             kernel_name = \"quartic\",         \n#             bw = 500,                       \n#             samples = samples,            \n#             method = \"simple\",              \n#             grid_shape = c(100, 100),         \n#             verbose = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# class(kde)\n# save(kde, file = \"data/kde.Rdata\")\n# saveRDS(kde, file = \"data/kde.rds\")\n```\n:::\n\n\n\nHere is a 3 day handle, so we load the data directly from our save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKDE <- readRDS(\"data/kde.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples$density <- KDE\nlixels$density <- KDE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove the density with 0 \nfiltered_samples <- samples[samples$density != 0, ]\nfiltered_lixels <-lixels[lixels$density != 0, ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# rescaling to help the mapping\nsamples$density <- samples$density*1000\nlixels$density <- lixels$density*1000\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(filtered_lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(acc_with_roads)+\n  tm_dots()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(Road_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(acc_with_roads)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(filtered_lixels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"lineID\"     \"name\"       \"name_en\"    \"highway\"    \"surface\"   \n [6] \"smoothness\" \"width\"      \"lanes\"      \"oneway\"     \"bridge\"    \n[11] \"layer\"      \"source\"     \"name_th\"    \"osm_id\"     \"osm_type\"  \n[16] \"Shape_Leng\" \"Shape_Area\" \"ADM1_EN\"    \"geometry\"   \"density\"   \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the rows where 'ADM1_EN' is \"Bangkok\"\nFiltered_lixels_simple <- filtered_lixels[filtered_lixels$ADM1_EN == \"Bangkok\", ]\n\n# Select only columns 1 to 14 and column 20\nFiltered_lixels_simple <- Filtered_lixels_simple[, c(1, 14:20)]\n\n# Check the result\nhead(Filtered_lixels_simple)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 7 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 664396.5 ymin: 1521369 xmax: 665939.1 ymax: 1525313\nProjected CRS: WGS 84 / UTM zone 47N\n     lineID     osm_id  osm_type Shape_Leng   Shape_Area ADM1_EN\n2454   2454   32036743 ways_line  0.1341318 0.0009501914 Bangkok\n2473   2473 1059569203 ways_line  0.1341318 0.0009501914 Bangkok\n2609   2609  864040937 ways_line  0.1341318 0.0009501914 Bangkok\n2626   2626 1059569204 ways_line  0.1341318 0.0009501914 Bangkok\n2694   2694  175807253 ways_line  0.1341318 0.0009501914 Bangkok\n2808   2808 1038307916 ways_line  0.1341318 0.0009501914 Bangkok\n                           geometry      density\n2454 LINESTRING (664427 1521369,... 6.112661e-08\n2473 LINESTRING (665917.7 152531... 1.801466e-06\n2609 LINESTRING (664948.3 152286... 2.017165e-07\n2626 LINESTRING (665915.4 152530... 1.402174e-06\n2694 LINESTRING (665885.3 152522... 6.145220e-07\n2808 LINESTRING (664427.9 152136... 1.295446e-07\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# kfun <- kfunctions(Filtered_lixels_simple,\n#                    car_acc,\n#                    start = 0, \n#                    end = 2000, \n#                    step = 100, \n#                    width = 100, \n#                    nsim = 50, \n#                    resolution = 50,\n#                    verbose = FALSE, \n#                    conf_int = 0.05,\n#                    agg = 1000)\n```\n:::\n\n\n\n## Temporal\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadm2_time <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp\", layer = \"tha_admbnda_adm2_rtsd_20220121\") %>%\n  st_transform(adm2, crs = 32647) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `/Applications/SMU/S3/ISSS-626/ISSS-626 ZOUJIAXUN/Take-home_Ex/Take-home_Ex01/data/tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrd_time <- filtered_lixels\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_acc_time <- car_acc_time %>%\n  mutate(accident_severity = case_when(\n    number_of_fatalities >= 1 | number_of_injuries >= 10 ~ \"Heavy\",  # Heavy accidents\n    number_of_fatalities == 0 & number_of_injuries > 0 ~ \"Middle\",   # Middle accidents\n    number_of_fatalities == 0 & number_of_injuries == 0 & number_of_vehicles_involved > 0 ~ \"Low\"  # Low accidents\n  ))\n\n# Check the result\nprint(car_acc_time %>% select(number_of_fatalities, number_of_injuries, number_of_vehicles_involved, accident_severity))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 12986 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 591277.5 ymin: 1486846 xmax: 710166.1 ymax: 1576520\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 12,986 × 5\n   number_of_fatalities number_of_injuries number_of_vehicles_involved\n                  <dbl>              <dbl>                       <dbl>\n 1                    0                  2                           1\n 2                    0                  1                           1\n 3                    0                  0                           2\n 4                    0                  1                           1\n 5                    0                  1                           1\n 6                    1                  0                           1\n 7                    1                  0                           1\n 8                    0                  0                           1\n 9                    0                  0                           1\n10                    0                  1                           1\n# ℹ 12,976 more rows\n# ℹ 2 more variables: accident_severity <chr>, geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for heavy accidents\nheavy_accidents <- car_acc_time %>%\n  filter(accident_severity == \"Heavy\")\n\n# Filter for middle accidents\nmiddle_accidents <- car_acc_time %>%\n  filter(accident_severity == \"Middle\")\n\n# Filter for low accidents\nlow_accidents <- car_acc_time %>%\n  filter(accident_severity == \"Low\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check unique values of accident_severity to verify if \"Middle\" exists\nunique(car_acc_time$accident_severity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Middle\" \"Low\"    \"Heavy\"  NA      \n```\n\n\n:::\n\n```{.r .cell-code}\n# Check rows where accident_severity is NA\nna_rows <- car_acc_time %>%\n  filter(is.na(accident_severity))\n\n# Display the rows with NA in accident_severity\nprint(na_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 10 features and 22 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 629650.3 ymin: 1506187 xmax: 699308.5 ymax: 1559319\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 10 × 23\n   acc_code incident_datetime   report_datetime     province_th  province_en \n *    <dbl> <dttm>              <dttm>              <chr>        <chr>       \n 1  3837875 2021-04-04 04:30:00 2021-04-11 20:12:00 ปทุมธานี       Pathum Thani\n 2  4995686 2021-05-28 22:00:00 2021-10-14 15:13:00 สมุทรสาคร     Samut Sakhon\n 3  4837299 2021-08-04 14:44:00 2021-09-17 07:54:00 สมุทรปราการ   Samut Prakan\n 4  4837405 2021-09-10 16:56:00 2021-09-17 07:58:00 กรุงเทพมหานคร Bangkok     \n 5  4931496 2021-09-30 12:00:00 2021-10-03 10:30:00 กรุงเทพมหานคร Bangkok     \n 6  5377382 2021-12-15 18:50:00 2021-12-17 15:36:00 กรุงเทพมหานคร Bangkok     \n 7  7332590 2022-11-05 18:50:00 2022-11-05 18:50:00 กรุงเทพมหานคร Bangkok     \n 8  7476811 2022-12-20 14:56:00 2022-12-21 11:57:00 กรุงเทพมหานคร Bangkok     \n 9  7476920 2022-12-21 11:21:00 2022-12-21 11:31:00 กรุงเทพมหานคร Bangkok     \n10  7476799 2022-12-21 11:55:00 2022-12-21 11:55:00 กรุงเทพมหานคร Bangkok     \n# ℹ 18 more variables: agency <chr>, route <chr>, vehicle_type <chr>,\n#   presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, road_description <chr>,\n#   slope_description <chr>, Month_num <dbl>, Month_fac <ord>, Day <int>,\n#   Day_of_week <ord>, clock <chr>, geometry <POINT [m]>,\n#   accident_severity <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reorder the accident_severity factor to ensure \"Heavy\" is at the bottom\ncar_acc_time <- car_acc_time %>%\n  mutate(accident_severity = factor(accident_severity, levels = c(\"N/A\", \"Low\", \"Middle\", \"Heavy\")))\n\n# Verify the factor levels\nlevels(car_acc_time$accident_severity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"N/A\"    \"Low\"    \"Middle\" \"Heavy\" \n```\n\n\n:::\n\n```{.r .cell-code}\n# Create a stacked bar plot with \"Heavy\" at the bottom\nggplot(car_acc_time, aes(x = Month_num, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Stacked Bar Plot of Traffic Accidents by Severity and Month\",\n       x = \"Month Number\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\") +\n  scale_x_continuous(breaks = 1:12, labels = month.abb)  # Display month abbreviations\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure Day_of_week is an ordered factor (starting from Monday)\ncar_acc_time <- car_acc_time %>%\n  mutate(Day_of_week = factor(Day_of_week, levels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\")))\n\n# Verify the levels\nlevels(car_acc_time$Day_of_week)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Mon\" \"Tue\" \"Wed\" \"Thu\" \"Fri\" \"Sat\" \"Sun\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a stacked bar plot based on Day_of_week\nggplot(car_acc_time, aes(x = Day_of_week, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Stacked Bar Plot of Traffic Accidents by Severity and Day of the Week\",\n       x = \"Day of the Week\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract just the hour from the clock column (assuming clock is in HH:MM:SS format)\ncar_acc_time <- car_acc_time %>%\n  mutate(hour = format(as.POSIXct(clock, format = \"%H:%M:%S\"), \"%H\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a stacked bar plot based on the hour of the day\nggplot(car_acc_time, aes(x = hour, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Stacked Bar Plot of Traffic Accidents by Severity and Time of Day\",\n       x = \"Hour of the Day\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\") +\n  scale_x_discrete(breaks = 1:24)  # Ensure all hours (0-23) are shown on the x-axis\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the clock to POSIXct format and classify into Morning and Evening\ncar_acc_time <- car_acc_time %>%\n  mutate(time_of_day = case_when(\n    format(as.POSIXct(clock, format = \"%H:%M:%S\"), \"%H\") >= \"06\" & \n    format(as.POSIXct(clock, format = \"%H:%M:%S\"), \"%H\") < \"18\" ~ \"Morning\",\n    \n    TRUE ~ \"Evening\"\n  ))\n\n# Verify the new time_of_day column\ntable(car_acc_time$time_of_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nEvening Morning \n   5790    7196 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a stacked bar plot for Morning and Evening\nggplot(car_acc_time, aes(x = time_of_day, fill = accident_severity)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Stacked Bar Plot of Traffic Accidents by Severity and Time of Day\",\n       x = \"Time of Day\",\n       y = \"Number of Accidents\",\n       fill = \"Accident Severity\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}