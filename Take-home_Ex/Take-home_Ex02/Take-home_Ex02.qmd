---
title: "Take-home_Ex02"
author: "Zou Jiaxun"
date: "Oct 2, 2024"
data-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
  cache: true
format:
  html:
    code-fold: true
    code-summary: "Click to view code"
---

# **1 Overview**

## **1.1 Background**

Tourism is a critical pillar of Thailand’s economy, contributing around 20% of the country’s GDP. In 2019, the sector generated approximately 90 billion US dollars from both domestic and international tourism. However, the COVID-19 pandemic severely impacted the industry, reducing revenues to 24 billion US dollars in 2020. Since September 2021, tourism revenue has shown a steady recovery, as indicated by the data from January 2019 to February 2023. Despite this rebound, the benefits of the tourism economy are concentrated in a few key provinces—Bangkok, Phuket, Chiang Mai, Sukhothai, and Phetchaburi—highlighting an uneven distribution of tourism income across the country.

## **1.2 Objectives**

::: panel-tabset
## Aim

Test **tourism economy** of Thailand are **independent** from space and space and time or not.

Detect where are the **clusters and outliers**, and the emerging **hot spot/cold spot areas**.

## Test

Using appropriate function of **sf** and **tidyverse**, preparing the following geospatial data layer:

-   a study area layer in sf polygon features. It must be at [province level](http://localhost:3980/Take-Home_Ex/Take-home_Ex02/Take-home_Ex02.html#0) (including Bangkok) of Thailand.

-   a tourism economy indicators layer within the study area in sf polygon features.

-   a derived tourism economy indicator layer in [spacetime s3 class of sfdep](http://localhost:3980/Take-Home_Ex/Take-home_Ex02/Take-home_Ex02.html#0). Keep the time series at **month and year levels**.

Using the extracted data, perform

-   global spatial autocorrelation analysis

-   local spatial autocorrelation analysis

-   emerging hotspot analysis

by using [sfdep methods](http://localhost:3980/Take-Home_Ex/Take-home_Ex02/Take-home_Ex02.html#0).

Describe the spatial patterns revealed by the analysis above.
:::

# **2 Data Wrangling**

## **2.1 Loading Packages**

The following packages will be used for this exercise:

```{r}
pacman::p_load(sf, spNetwork, tmap, tidyverse, dplyr,
               spatstat, knitr, sfdep, spdep, ClustGeo,
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, GGally, spacetime)

package_info <- data.frame(
  Package = c(
    "sf", "spNetwork", "tmap", "tidyverse", "dplyr", 
    "spatstat", "knitr", "sfdep", "spdep", "ClustGeo", 
    "ggpubr", "cluster", "factoextra", "NbClust", 
    "heatmaply", "corrplot", "psych", "GGally", "Spacetime"
  ),
  Description = c(
    "For importing, managing, and handling geospatial data",
    "For network-based spatial analysis, including kernel density estimation on networks",
    "For thematic mapping and interactive visualizations",
    "For non-spatial data wrangling and general data analysis with a collection of packages",
    "For data manipulation and pipeline tools, part of the tidyverse",
    "For spatial statistics and point pattern analysis",
    "For dynamic report generation using LaTeX, HTML, and Markdown",
    "For spatial statistics with a focus on spatial dependence and spatial autoregressive models",
    "For spatial dependence analysis in spatial econometrics, including spatial lag and error models",
    "For clustering spatial data using hierarchical clustering and geographical constraints",
    "For creating publication-ready plots",
    "For performing various clustering algorithms and analysis",
    "For visualizing and interpreting the results of multivariate data clustering",
    "For determining the optimal number of clusters in a dataset using various indices",
    "For creating interactive heatmaps and hierarchical clustering visualizations",
    "For visualizing correlation matrices using various methods",
    "For performing descriptive statistics, factor analysis, and psychometrics",
    "For visualizing correlations, pair plots, and creating enhanced data analysis plots",
    "For linking a flat data set containing spatio-temporal information with the related geometry"
  )
)

knitr::kable(package_info, col.names = c("Package", "Description"))
```

## **2.2 The Data**

The following data are used for this study:

-   Aspatial:

    -   *Thailand Domestic Tourism Statistics* at Kaggle. Version 2 is required to do the data set.

-   Geospatial:

    -   *Thailand - Subnational Administrative Boundaries* at HDX.

## 2.3 Import & Preparation

:::: panel-tabset
## Aspatial

We will be importing the *Thailand domestic tourism from 2019 to 2023* by using the *read_csv()* or **readr** package, and check the repeat columns with the *duplicated()*

```{r}
tourism <- read_csv("data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv")
head(tourism, 5)
any(duplicated(tourism))
```

-   There are 7 variables in the *tourism* data, they are:

    -   ***Date***: The month and year when the statistics were recorded. The dataset spans the years 2019-2023

    -   ***province_thai***: The name of the province in Thailand, in the Thai language

    -   ***province_eng***: The name of the province in Thailand, in English

    -   ***region_thai***: The name of the region in Thailand to which the province belongs, in the Thai language

    -   ***region_eng***: The name of the region in Thailand to which the province belongs, in English

    -   ***variable***: The 8 type of data being recorded, such as the number of tourists or the occupancy rate.

    -   ***value***: The value of the data being recorded

-   We also note that values in *variable*  are 8 different types of data that represent different occupancy rate.

    -   ***no_tourist_all***: The total number of domestic tourists who visited the province

    -   ***no_tourist_foreign***: The number of foreign tourists who visited the province

    -   ***no_tourist_occupied***: The total number of occupied hotel rooms in the province

    -   ***no_tourist_thai***: The number of Thai tourists who visited the province

    -   ***occupancy_rate***: The percentage of occupied travel accommodation in the province

    -   ***revenue_all***: The revenue generated by the tourism industry in the province, in Thai Baht

    -   ***revenue_foreign***: The revenue generated by foreign tourists in the province, in Thai Baht

    -   ***revenue_thai***: The revenue generated by Thai tourists in the province, in Thai Baht

```{r}
filtered_tourism <- tourism %>%
  select(date, province_eng, variable, value) %>%
  pivot_wider(names_from = variable, values_from = value) 
head(filtered_tourism, 10)
```

::: callout-note
Now, we have different values based on variable! Let's go to solving these data further to make it at month and year levels!
:::

```{r}
tourism_adm1 <- filtered_tourism %>%
  rename(adm1 = province_eng) %>%
  select(adm1, 
         ratio_tourist_stay, 
         no_tourist_stay, 
         no_tourist_all, 
         no_tourist_thai, 
         no_tourist_foreign, 
         revenue_all, 
         revenue_thai, 
         revenue_foreign, 
         date)
  
```

```{r}
head(glimpse(tourism_adm1),5)
```

## Geospatial

```{r}
bd <- st_read(dsn = "data/geospatial", layer = "tha_admbnda_adm2_rtsd_20220121")
# st_crs(bd)

bd <- st_transform(bd, crs = 32647)
# st_crs(bd)

any(duplicated(bd))

bd_clean <- bd %>%
  select(where(~ !all(is.na(.)))) %>%
  select(Shape_Leng, Shape_Area, ADM1_EN, date, geometry) %>%
  group_by(ADM1_EN) %>%
  summarise(geometry = st_union(geometry),
            Shape_Leng = sum(Shape_Leng),
            Shape_Area = sum(Shape_Area)) %>%
  rename(adm1 = ADM1_EN)

```

The imported shape file is simple features object of sf. From the output, we can see that there are 928 features and 19 fields, and confirm that the datum WGS 84 is correct. Moreover, based on the province level, we *summarise()* the geometry.

```{r}
# Calculate centroids for each province
bd_centroid <- st_centroid(bd_clean)

basemap <- tm_shape(bd_clean) +
  tm_polygons() +
  tm_shape(bd_centroid) +
  tm_text("adm1", size = 0.2)
tmap_mode("plot")
basemap
```
::::

Since we have prepared the aspatial data and geospatial data, we will merge them together to help us further visualization

```{r}
merged_data <- left_join(tourism_adm1, bd_clean, by = "adm1")
```

After merging using the *left_join()*, we can see there are some NA in the shape_lengh and Shape_area, what's more, with a further check, we find that the NA is due to a name mismatch like *Lop Buri* in **bd_clean and** *Lopburi* in **tourism_adm1**

```{r}
# Get unique names from both datasets
bd_names <- unique(bd_clean$adm1)
tourism_names <- unique(tourism_adm1$adm1)

# Identify names in bd_clean not present in tourism_adm1
mismatched_names <- setdiff(bd_names, tourism_names)
mismatched_names
```

```{r}
name_fixes <- c(
  "Buri Ram" = "Buriram",
  "Chai Nat" = "Chainat",
  "Chon Buri" = "Chonburi",
  "Lop Buri" = "Lopburi",
  "Nong Bua Lam Phu" = "Nongbualamphu",
  "Phangnga" = "Phang Nga",
  "Prachin Buri" = "Prachinburi",
  "Si Sa Ket" = "Sisaket"
)

# Apply the fixes to the 'adm1' column in bd_clean
bd_clean$adm1 <- sapply(bd_clean$adm1, function(x) {
  if (x %in% name_fixes) {
    names(name_fixes)[which(name_fixes == x)]
  } else {
    x
  }
})

merged_data <- left_join(bd_clean, tourism_adm1, by = "adm1")

# Remove rows with any NA values
merged_data <- merged_data %>% drop_na()
```

And then we want a derived tourism economy indicator layer in spacetime s3 class of sfdep, moreover, try to keep the time series at month and year levels.

```{r}
# Check if merged_data is already an sf object, if not convert it
if (!inherits(merged_data, "sf")) {
  merged_data <- st_as_sf(merged_data)
}

# Extract spatial part (provinces and geometry)
spatial_data <- st_geometry(merged_data) # this contains the geometry

# Make sure "adm1" column corresponds to province names
# Optional: Ensure there's no mismatch in province names

# Convert 'date' column to Date type if it’s not already in that format
merged_data$date <- as.Date(merged_data$date, format = "%Y-%m-%d")
```

```{r}
# Extract the relevant time and spatial features
time_data <- unique(merged_data$date)  # temporal part

# Sort the time_data to ensure it is in increasing order
time_data <- sort(time_data)
```

```{r}
# Create a full combination of all spatial units (adm1) and time points (date)
spatio_temporal_grid <- expand.grid(
  adm1 = unique(merged_data$adm1),  # Ensure these are the correct spatial units
  date = unique(merged_data$date)   # Ensure this is in correct date format
)
# Merge the full spatio-temporal grid with the actual data
full_data <- left_join(spatio_temporal_grid, merged_data, by = c("adm1", "date"))

# Check how many rows the full_data now has
actual_rows <- nrow(full_data)
print(paste("Actual rows after merging:", actual_rows))
# Replace NA values with 0 (if that's appropriate for your analysis)
full_data[is.na(full_data)] <- 0
```

```{r}
# Extract unique spatial data for adm1 (provinces)
spatial_data_unique <- merged_data %>%
  group_by(adm1) %>%
  summarise(geometry = first(geometry))  # Use the first geometry for each province
# Convert the unique spatial data to sp format
spatial_data_sp <- as(st_as_sf(spatial_data_unique), "Spatial")


non_spatial_data <- as.data.frame(full_data)

# Remove 'adm1' (or any other conflicting columns) from non_spatial_data
non_spatial_data <- non_spatial_data %>%
  select(-adm1)  # Remove the column to avoid conflict
```

Get the spatio-temporal object

```{r}
# Create the STFDF object with the correct non-spatial data
stfdf <- STFDF(spatial_data_sp, time_data, data = non_spatial_data)

# Optional: Print the summary of the created spatio-temporal object
summary(stfdf)
```

```{r}
saveRDS(stfdf, "data/rds/spacetime_data.rds")
```

```{r}
# # Convert the S4 into S3
# # Extract the slots from the STFDF object
# spatial_data <- stfdf@sp      # Spatial data (spatial features)
# temporal_data <- stfdf@time   # Temporal data (time points)
# attribute_data <- stfdf@data  # Non-spatial attributes
# 
# # Combine the extracted components into a list (an S3 object)
# s3_object <- list(
#   spatial = spatial_data,
#   time = temporal_data,
#   attributes = attribute_data
# )
# 
# # Check the structure of the new S3 object
# str(s3_object)
# Extract spatial data (provinces and their geometries)
spatial_data <- stfdf@sp    # Extract spatial data (sf object)

# Extract temporal data (dates or time points)
temporal_data <- stfdf@time

# Extract the tourism economy indicators (such as tourism revenue)
tourism_data <- stfdf@data$revenue_all  # Replace with the relevant column name
```

```{r}
# x <- purrr::map_dfr(1:10, ~merged_data_year) |>
#   select(revenue_all) |>
#   mutate(
#     date = sort(rep(1:10, 3458)),
#     # Add noise to selected columns using random numbers
#     no_tourist_all = no_tourist_all * runif(3458, min = 0.8, max = 1.2),
#     revenue_all = revenue_all * runif(3458, min = 0.8, max = 1.2)
#   )
# x
# Combine spatial and temporal data into an S3-compatible structure (data frame)
```

```{r}
# spt <- as_spacetime(x, "no_tourist_all", "revenue_all" , "time_period")
```

# **3 Geospatial Analysis**

```{r}
# Aggregate data by year instead of month
merged_data <- merged_data %>%
  mutate(year = format(date, "%Y"))  # Extract year

necessary_columns <- c("adm1", "geometry", "Shape_Leng", "Shape_Area", "revenue_all", "year")

filtered_data <- merged_data[, necessary_columns]
```

```{r}
# Group by province (adm1) and year, then sum the revenue for each year
filtered_data <- filtered_data %>%
  group_by(adm1, year) %>%
  summarise(revenue_all = sum(revenue_all, na.rm = TRUE))

```

```{r}
filtered_data_2023 <- filtered_data %>%
  filter(year == 2023)
```

## **3.1 Spatial Autocorrelation**

```{r}
wm_q <- poly2nb(filtered_data_2023, queen=TRUE, snap = 1)
summary(wm_q)
```

The summary report above shows that there are 69 area units in Thailand The most connected area unit has 9 neighbours. There are two area units with only one heighbours.

```{r}
longitude <- map_dbl(filtered_data_2023$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(filtered_data_2023$geometry, ~st_centroid(.x)[[2]])
```

```{r}
coords <- cbind(longitude, latitude)
```

```{r}
head(coords)
```

```{r}
plot(filtered_data_2023$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.2, add = TRUE, col = "red")
```

## **3.2 Spatial Test**

In this section, we will demonstrate how to perform Moran’s I statistics testing by using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**. Moran’s I is a test for spatial autocorrelation. It measures the overall spatial autocorrelation of the data, i.e. overall, how one object is similar or dissimilar to others surrounding it, evaluating whether the observation (in our case,  revenue province) is clustered, dispersed, or random.

The values of Moran’s I range from +1 meaning strong positive spatial autocorrelation (clustering) to 0 meaning no autocorrelation (a random pattern) to -1 indicating strong negative spatial autocorrelation (dispersion).

```{r}
# Check the CRS (Coordinate Reference System)
st_crs(filtered_data)
```

```{r}
# Simplify geometries
filtered_data_simplified <- st_simplify(filtered_data, dTolerance = 1)  # Adjust tolerance as needed
```

```{r}
nb <- poly2nb(filtered_data_simplified)
```

```{r}
# Convert the neighbors list to a weights list
lw <- nb2listw(nb, style = "W", zero.policy = TRUE)
```

The null hypothesis we are testing states that: “The values for tourism revenue are randomly distributed across Thailand’s provinces, following a completely random spatial process.” The alternative hypothesis is: “The values for tourism revenue are not randomly dispersed, indicating spatial clustering.”

The following code chunk performs Moran’s I statistic test using moran.test() from the **spdep** package.

```{r}
moran_test <- moran.test(filtered_data_simplified$revenue_all, lw)
print(moran_test)
```

The Moran’s I statistic is 0.0801, and the p-value is very small, which means there is significant positive spatial autocorrelation. This implies that provinces with similar tourism revenues tend to cluster together spatially.

```{r}
local_moran <- localmoran(filtered_data_simplified$revenue_all, lw)

# Add the LISA results to the dataset
filtered_data_simplified$lisa <- local_moran[, "Ii"]
```

```{r}
tm_shape(filtered_data_simplified) +
  tm_polygons("lisa", palette = "RdYlBu", title = "Local Moran's I - LISA") +
  tm_layout(title = "LISA for Tourism Revenue")
```

Local Indicators of Spatial Association (LISA) address the limitations of the global Moran’s I test by allowing us to identify **local clusters or outliers** of tourism revenue and assess their statistical significance. In addition to identifying the four types of spatial relationships (high-high, high-low, low-high, and low-low) in the **LISA cluster map**, there is a fifth category: **provinces with no statistically significant spatial autocorrelation** (no clustering).

```{r}
hotspot_analysis <- localG(filtered_data_simplified$revenue_all, lw)

filtered_data_simplified$hotspots <- hotspot_analysis

tm_shape(filtered_data_simplified) +
  tm_polygons("hotspots", palette = "RdYlBu", title = "Hotspots") +
  tm_layout(title = "Hotspot Analysis for Tourism Revenue")
```

The hotspot analysis identifies provinces where tourism revenue has been significantly higher or lower than expected, highlighting the spatial distribution of “hot” and “cold” areas.

::: callout-note
1.  **Moran’s I** indicates that there is a significant positive spatial autocorrelation in tourism revenue across Thailand’s provinces, meaning that provinces with similar revenue levels are clustered together geographically.
2.  **Local Moran’s I (LISA)** further identifies local clusters of provinces with high tourism revenue, as well as potential outliers where individual provinces behave differently from their neighbors.
3.  **Hotspot Analysis** reveals provinces that are hotspots or cold spots for tourism revenue, helping to pinpoint areas with significant increases or decreases in tourism activity over time.
:::

# **4 Conclusion**

Our analysis of Thailand’s tourism economy from 2019 to 2023 has provided valuable insights into the spatial and temporal patterns of tourism revenue during the COVID-19 pandemic. Using spatial autocorrelation techniques such as **Moran’s I** and **Local Moran’s I (LISA)**, along with **Hotspot Analysis**, we identified significant clusters and trends across Thailand’s provinces.

Overall, the analysis revealed **uneven distributions of tourism revenue** across Thailand during the study period. Provinces with **high tourism revenue** formed consistent **high-high clusters**, particularly around key tourism regions such as Bangkok and coastal areas. These regions have shown resilience, likely benefiting from their established infrastructure and popularity with both domestic and international tourists. In contrast, **low-low clusters** were observed in more rural and less economically developed provinces, which faced greater challenges in recovering from the pandemic’s impact.

The hotspot analysis highlighted **emerging trends**: certain provinces experienced **significant increases in tourism revenue** over time, indicating hotspots of recovery and growth. On the other hand, some provinces have remained in a **cold spot** zone, with **consistently low tourism revenue**, likely reflecting a slower recovery or greater reliance on international tourism, which was heavily impacted during the pandemic.

**Future Work**

Several directions could be explored to enhance the depth and scope of this analysis:

-   **Consider Other Tourism Indicators**: While this analysis focused on tourism revenue, incorporating other indicators such as tourist arrivals, hotel occupancy rates, or tourism employment could provide a more comprehensive understanding of the impacts of COVID-19.

-   **Investigate Province-Level Socioeconomic Factors**: Including variables such as population density, income levels, and economic dependency on tourism would help explain the uneven recovery of different provinces and identify areas needing targeted intervention.

-   **Examine the Role of Domestic vs. International Tourists**: Differentiating between domestic and international tourism recovery could reveal which provinces rely more heavily on international visitors and have been slower to recover due to global travel restrictions.

-   **Temporal Granularity**: Future analyses could explore more granular temporal data (e.g., monthly or quarterly) to detect short-term trends and identify periods of rapid change in tourism activity as COVID-19 restrictions were lifted.

-   **Incorporate External Factors**: Further analysis could include the impact of government policies, travel restrictions, and vaccination rates on tourism recovery, providing a richer context for understanding the spatio-temporal patterns observed.

By expanding on these areas, future work could provide a more nuanced understanding of the pandemic’s impact on Thailand’s tourism economy, offering actionable insights for policymakers and stakeholders in the tourism sector.

**Summary of Key Insights:**

-   **High-High Clusters**: Provinces like Bangkok and popular coastal areas demonstrated resilience with consistently high tourism revenue.

-   **Low-Low Clusters**: Rural and less developed provinces faced more significant challenges, showing consistently low tourism revenue.

-   **Hotspots**: Certain provinces showed emerging recovery trends, while others remained cold spots, reflecting uneven recovery across the country.
