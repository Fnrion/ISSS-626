---
title: "Take-home_Ex01"
author: "Zou Jiaxun"
date: "Sep 23, 2024"
data-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
  cache: true
format:
  html:
    code-fold: true
    code-summary: "Click to view code"
---

::: {.alert .alert-dismissible .alert-primary style="width: 94%;"}
**OH NO!!!**

**There is a collapse after 1 day data processing!!**

**Error: vector memory limit of 16.0 Gb reached, see mem.maxVSize()!!!**

![](Picture/NONONO.png){fig-align="center" width="80" height="100"}

**Important thing to learn, even if shrinking data into 1/30, still try saveRDS!!!**
:::

# **1 Overview**

## **1.1 Background**

Spatial Point Patterns Analysis (SPPA) has proven to be an effective tool in studying and identifying the factors that contribute to road traffic accidents. Previous research has highlighted its potential, particularly in exploring spatial distributions and correlations. However, much of this research has predominantly concentrated on either behavioral factors (such as driver behavior and road usage) or environmental factors (such as road conditions and weather). Temporal factors—such as seasonal variations, the day of the week, or specific times of day—have received limited attention, despite their potential influence on accident patterns. Addressing these temporal dimensions can offer a more comprehensive understanding of traffic accidents, contributing to more effective prevention strategies.

## **1.2 Objectives**

::: callout-caution
[Here](https://isss626-ay2024-25aug.netlify.app/take-home_ex01) are the requirement of take-home_Ex01
:::

# **2 Data Wrangling**

## **2.1 Loading Packages**
```{r, cache = TRUE}
pacman::p_load(sf, spNetwork, tmap, tidyverse, dplyr, spatstat, knitr)
```

```{r}
library(knitr)

# Create a table with package names and descriptions
package_info <- data.frame(
  Package = c("sf", "spNetwork", "tmap", "tidyverse", "dplyr", "spatstat"),
  Description = c(
    "For importing, managing, and handling geospatial data",
    "For network-based spatial analysis, including kernel density estimation on networks",
    "For thematic mapping",
    "For non-spatial data wrangling and general data analysis",
    "For data manipulation and pipeline tools",
    "For spatial statistics and point pattern analysis"
  )
)

# Display the table using kable (knitr)
kable(package_info, col.names = c("Package", "Description"))
```

## **2.2 Data Collect**

For the purpose of this exercise, three basic data sets are needed, they are:

-   [Thailand Road Accident \[2019-2022\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle

-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.

-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.

All of them are spatial data

## **2.3 Preparation**

Now we’re loading both the event (acc), polygon (dm2) and road network (Road). Ensure that each layer is in the same CRS. (P.S. this step will overlap the Kfun, since too many points in the same location)

:::{.panel-tabset}

## Car accident (acc)
```{r, cache = TRUE}
# List of BMR provinces
bmr_provinces <- c("Bangkok", "Nonthaburi", "Pathum Thani", "Samut Prakan", "Nakhon Pathom", "Samut Sakhon")

# Read and process the accident data
car_acc <- read_csv('data/Thailand_Road_Accident/thai_road_accident_2019_2022.csv') %>%
  
  # Remove rows with missing longitude or latitude
  filter(!is.na(longitude) & !is.na(latitude)) %>%

  # Filter rows for BMR provinces
  filter(province_en %in% bmr_provinces) %>%
  
  # Create new columns
  mutate(Month_num = month(incident_datetime),
         Month_fac = month(incident_datetime, label = TRUE, abbr = TRUE),
         Day = day(incident_datetime),
         Day_of_week = wday(incident_datetime, label = TRUE),
         incident_datetime = ymd_hms(incident_datetime),
         clock = format(incident_datetime, "%H:%M:%S")) %>%
  
  # Convert to an sf object
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
  
  # Reproject to UTM Zone 47N (for Thailand)
  st_transform(crs = 32647)

  # add later time analysis car_acc_time
car_acc_time <- car_acc
  
car_acc <- car_acc_time %>%
  select(1, 5, 17:22)

car_acc
```

## Administration level 2 (adm2)

```{r}
# Load administrative boundaries (adm2 level)
adm2 <- st_read(dsn = "data/tha_adm_rtsd_itos_20210121_shp", layer = "tha_admbnda_adm2_rtsd_20220121") %>%
  st_transform(adm2, crs = 32647)
adm2_time <- adm2
adm2 <- adm2_time %>%
  select(1:3,11,20)
```
Filter administrative boundaries for BMR provinces
```{r, cache = TRUE}

bmr_boundaries <- adm2 %>%
  filter(ADM1_EN %in% bmr_provinces)
bmr_boundaries
```

## Road

```{r, cache = TRUE}
# Road <- st_read(dsn = "data/hotosm_tha_roads_lines_shp", layer = "hotosm_tha_roads_lines_shp") %>%
#     st_set_crs(4326) %>%  # Assign CRS if it's missing
#     st_transform(Road, crs = 32647)
Road <- readRDS("data/Road.rds")
```

```{r}
saveRDS(Road, file = "data/Road")
```
Filter the road network to only include roads in the BMR area
```{r, cache = TRUE}
# Road_bmr <- st_intersection(Road, bmr_boundaries)
Road_bmr <- readRDS("data/Road_bmr.rds")
```

```{r}
head(Road_bmr,5)
```
:::

# **3 Geospatial Analysis **

We are going to prepare a basemap and a choropleth map showing the distribution of acc by using *qtm()* of **tmap** package.

```{r}
joined_data <- st_join(car_acc_time, adm2_time, join = st_within)
```

```{r}
# Adjust the basemap to use tm_dots() for point data
basemap <- tm_shape(adm2_time) +
  tm_polygons() + 
  tm_text("ADM2_EN", size = 0.5)

# Create the fatalities map
fatalities <- qtm(joined_data, "number_of_fatalities")

# Arrange the maps side by side
tmap_arrange(basemap, fatalities, asp = 1, ncol = 2)
```

### **3.1 Converting the generic sp format into spatstat’s ppp format**

Now, we will use *as.ppp()* function of **spatstat** to convert the spatial data into **spatstat**’s ***ppp*** object format.

```{r}
acc_ppp <- as.ppp(car_acc_time)
acc_ppp
```

Let us plot ***acc_ppp*** and examine the different.

```{r}
plot(acc_ppp)
```

### **3.2 Handling duplicated points**

We can check the duplication in a ***ppp*** object by using the code chunk below.

```{r}
any(duplicated(acc_ppp))
```

To count the number of co-indicence point, we will use the *multiplicity()* function as shown in the code chunk below.

```{r}
head(multiplicity(acc_ppp),10)
sum(multiplicity(acc_ppp) > 1)
```

```{r}
bmr_owin <- as.owin(bmr_boundaries)
```

```{r}
plot(bmr_owin)
```

### **3.3 Combining point events object and owin object**

In this last step of geospatial data wrangling, we will extract acc events that are located within bmr by using the code chunk below.

```{r}
accbmr_ppp = acc_ppp[bmr_owin]
plot(accbmr_ppp)
```

### **3.4 Kernel Density Estimation**

```{r}
kde_accbmr_bw <- density(accbmr_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
plot(kde_accbmr_bw)
```

Since the plot is too dark, we will use rescale.ppp() and change the sigma_value

```{r}

sigma_value <- 1000  # Adjust this value based on your smoothing preference

accbmr_ppp.km <- rescale.ppp(accbmr_ppp, 1000, "km")

kde_accbmr_bw <- density(accbmr_ppp.km, sigma=sigma_value, edge=TRUE, kernel="gaussian")

plot(kde_accbmr_bw)
```

::: callout-note
The KDE map shows that car accidents are concentrated in specific high-risk areas, especially in the eastern region, where accident density is higher. In contrast, the western areas have fewer accidents. 
:::

Let's divide the province and see what's on the south-east

```{r}
# Load the required library
library(spatstat)

# Define the six provinces for BMR (Bangkok Metropolitan Region)
provinces <- c("Bangkok", "Nonthaburi", "Pathum Thani", "Samut Prakan", "Samut Sakhon", "Nakhon Pathom")

# Loop through each province and generate KDE
for (province in provinces) {
  # Subset the boundary for the specific province
  province_boundary <- subset(bmr_boundaries, ADM1_EN == province)
  
  # Convert the province boundary to owin format for spatstat
  province_owin <- as.owin(province_boundary)
  
  # Subset the accident data for the specific province using province_en
  province_data <- subset(car_acc_time, province_en == province)
  
  # Convert the accident data to ppp format (assuming coordinates are columns 'x' and 'y')
  # Adjust 'x' and 'y' to the correct column names in your dataset
  province_ppp <- as.ppp(province_data, W=province_owin)
  
  # Rescale to kilometers if necessary
  province_ppp.km <- rescale.ppp(province_ppp, 1000, "km")
  
  # Apply KDE with appropriate sigma
  sigma_value <- 1000  # Adjust this value based on preference
  kde_province <- density(province_ppp.km, sigma=sigma_value, edge=TRUE, kernel="gaussian")
  
  # Plot KDE (this will automatically handle coloring)
  plot(kde_province, main = paste("KDE for", province))
  
  # Overlay the boundary on top (without overriding color)
  plot(province_owin, add=TRUE, border="black")
}
```

Based on the KDE, we will choose "Khlong Luang", "Bang Phli" and "Mueang Samut Sakhon" in "Bangkok" as our analysis item in road network accident analysis

```{r}
car_acc_adm2 <- st_join(car_acc_time, adm2)
# Group by ADM2_EN and count the number of fatalities
fatalities_by_adm2 <- car_acc_adm2 %>%
  group_by(ADM2_EN) %>%
  summarise(total_fatalities = sum(number_of_fatalities, na.rm = TRUE))
print(fatalities_by_adm2)
```

## 3.5 Analysing Spatial Point Process Using G-Function

The G function measures the distribution of the distances from an arbitrary event to its nearest event.

```{r}
g_function <- Gest(accbmr_ppp)
plot(g_function, main="G-Function for Accidents in BMR", xlim = c(0,500))
```
```{r}
G_CK.csr <- envelope(accbmr_ppp, Gest, nsim = 99)
plot(G_CK.csr)
```
::: callout-note
Both plots suggest that the accidents in the BMR region are spatially clustered, especially at shorter distances
:::


## 3.6 NKDE

```{r, cache = TRUE}
# Visualize accident points
tmap_mode("plot")
tm_shape(car_acc) +
  tm_dots()
```

### 3.6.1 Spatial Join Accidents to Road Network

Now we can use st_nearest_feature() to join the accident points with the nearest road segments from the road network. (This will cause the increaing same location point, don't try)

```{r, cache = TRUE}
# Join accidents to the nearest road segment
acc_with_roads <- st_join(car_acc, Road_bmr, join = st_nearest_feature)

# Check the joined data
print(acc_with_roads)
```

### 3.6.2 Network-Based Analysis with spNetwork

Now we can perform network-based spatial analysis, like kernel density estimation (KDE) along the road network. The spNetwork package is useful for this type of analysis.

```{r, cache = TRUE}
# # Convert generic geometries to LINESTRING
# Road_bmr <- st_cast(Road_bmr, "LINESTRING")
Road_bmr <- readRDS("data/Road_bmr.rds")
```

```{r}
# Filter the adm2 dataset for the selected sub-districts
selected_adm2 <- adm2 %>%
  filter(ADM2_EN %in% c("Khlong Luang", "Bang Phli", "Mueang Samut Sakhon"))
```

```{r}
# Perform spatial join for the filtered sub-districts
car_acc_selected_adm2 <- st_intersection(car_acc_time, selected_adm2)
```

```{r}
# Perform spatial join between Road_bmr and selected_adm2 (the filtered sub-districts)
road_selected_adm2 <- st_join(Road_bmr, selected_adm2, left = FALSE)
```

```{r}
lixels_new <- lixelize_lines(road_selected_adm2, 
                             5000, 
                             mindist = 1000)
```

```{r, cache = TRUE}
samples_new <- lines_center(lixels_new) 
```

```{r, cache = TRUE}
# lixels <- lixelize_lines(Road_bmr, 
#                          2000, 
#                          mindist = 1000)
lixels <- readRDS("data/lixels.rds")
```

```{r, cache = TRUE}
samples <- lines_center(lixels) 
```

```{r eval = FALSE}
# Now run NKDE with the samples argument included
kde_new <- nkde(lines = lixels_new,
            events = car_acc_selected_adm2,
            w = rep(1, nrow(car_acc_selected_adm2)),
            kernel_name = "quartic",
            bw = 500,
            samples = samples_new,
            method = "simple",
            grid_shape = c(100, 100),
            verbose = TRUE)
```
```{r}
kfun_new <- kfunctions(lixels_new,
                   car_acc_selected_adm2,  
                   start = 0, 
                   end = 10000, 
                   step = 1000, 
                   width = 50, 
                   nsim = 50, 
                   resolution = 50,
                   verbose = FALSE, 
                   conf_int = 0.05,
                   agg = 100)
```

```{r}
kfun_new
```
:::{.callout-note}
The plot suggests that traffic accidents on the road network are non-randomly clustered, particularly at distances of around 2500 to 5000 meters. This clustering is statistically significant, as indicated by the blue line’s consistent deviation from the confidence envelope of random distribution. This could point to specific road segments or areas with higher accident rates, requiring targeted interventions for traffic safety.
:::
```{r}
saveRDS(samples, "data/samples.rds")
```

```{r eval = FALSE}
# # Now run NKDE with the samples argument included
# kde <- nkde(lines = Road_bmr,                
#             events = acc_with_roads,         
#             w = rep(1, nrow(acc_with_roads)), 
#             kernel_name = "quartic",         
#             bw = 500,                       
#             samples = samples,            
#             method = "simple",              
#             grid_shape = c(100, 100),         
#             verbose = TRUE)
```

```{r, eval = FALSE}
# class(kde)
# save(kde, file = "data/kde.Rdata")
# saveRDS(kde, file = "data/kde.rds")
```

Here is a 3 day handle, so we load the data directly from our save

```{r, cache = TRUE}
KDE <- readRDS("data/kde.rds")
```

```{r, cache = TRUE}
samples$density <- KDE
lixels$density <- KDE
```

```{r, cache = TRUE}
# rescaling to help the mapping
samples$density <- samples$density
lixels$density <- lixels$density
```

```{r}
filtered_lixels <- lixels[lixels$density > 0, ]
```

```{r, cache = TRUE}
tmap_mode("plot")
tm_shape(filtered_lixels)+
  tm_lines(col="density")+
tm_shape(acc_with_roads)+
  tm_dots(col = "black",
          size = 0.01)
```

```{r, cache = TRUE}
class(Road_bmr)
class(acc_with_roads)
```


```{r, eval=FALSE}
kfun <- kfunctions(Filtered_lixels_simple,
                   car_acc_bangkok,  
                   start = 0, 
                   end = 2000, 
                   step = 100, 
                   width = 50, 
                   nsim = 50, 
                   resolution = 50,
                   verbose = FALSE, 
                   conf_int = 0.05,
                   agg = 10000)
```

# 4. Visual Analysis

## 4.1 Analysis based on Accident Time with ggplot

First we divide the accident severity based on "number_of_vichel_involved", "number_of_fatalities" & "number_of injuries"

```{r, cache = TRUE}
car_acc_time <- car_acc_time %>%
  mutate(accident_severity = case_when(
    number_of_fatalities >= 1 | number_of_injuries >= 10 ~ "Heavy",  # Heavy accidents
    number_of_fatalities == 0 & number_of_injuries > 0 ~ "Middle",   # Middle accidents
    number_of_fatalities == 0 & number_of_injuries == 0 & number_of_vehicles_involved > 0 ~ "Low"  # Low accidents
  ))

# Check the result
print(car_acc_time %>% select(number_of_fatalities, number_of_injuries, number_of_vehicles_involved, accident_severity))
```

```{r, cache = TRUE}
# Filter for heavy accidents
heavy_accidents <- car_acc_time %>%
  filter(accident_severity == "Heavy")

# Filter for middle accidents
middle_accidents <- car_acc_time %>%
  filter(accident_severity == "Middle")

# Filter for low accidents
low_accidents <- car_acc_time %>%
  filter(accident_severity == "Low")
```

```{r}
# Check unique values of accident_severity to verify if "Middle" exists
unique(car_acc_time$accident_severity)
# Check rows where accident_severity is N/A
na_rows <- car_acc_time %>%
  filter(is.na(accident_severity))

print(na_rows)
```

```{r}
# Reorder the accident_severity factor to ensure "Heavy" is at the bottom
car_acc_time <- car_acc_time %>%
  mutate(accident_severity = factor(accident_severity, levels = c("N/A", "Low", "Middle", "Heavy")))

levels(car_acc_time$accident_severity)

plot_m <- ggplot(car_acc_time, aes(x = Month_num, fill = accident_severity)) +
  geom_bar(position = "stack") +
  labs(title = "Traffic Accidents by Severity and Month",
       x = "Month",
       y = "Number of Accidents",
       fill = "Accident Severity") +
  scale_x_continuous(breaks = 1:12, labels = month.abb) +  # Display month abbreviations
  theme_minimal()  # Use a minimal theme for cleaner appearance
plot_m
```

```{r}
# Ensure Day_of_week is an ordered factor (starting from Monday)
car_acc_time <- car_acc_time %>%
  mutate(Day_of_week = factor(Day_of_week, levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")))

# Verify the levels
levels(car_acc_time$Day_of_week)
```

```{r}
plot_w <- ggplot(car_acc_time, aes(x = Day_of_week, fill = accident_severity)) +
  geom_bar(position = "stack") +
  facet_wrap(~ province_en) +
  labs(title = "Traffic Accidents by Province and Day of the Week",
       x = "Day of the Week",
       y = "Number of Accidents",
       fill = "Accident Severity") +
  theme_minimal()
plot_w
```

```{r}
# Extract just the hour from the clock column (assuming clock is in HH:MM:SS format)
car_acc_time <- car_acc_time %>%
  mutate(hour = format(as.POSIXct(clock, format = "%H:%M:%S"), "%H"))
```

```{r}
# Ensure the 'hour' column is numeric
car_acc_time$hour <- as.numeric(car_acc_time$hour)

plot_h <- ggplot(car_acc_time, aes(x = hour, fill = accident_severity)) +
  geom_bar(position = "stack") +
  labs(title = "Traffic Accidents by Severity and Time of Day",
       x = "Hour of the Day",
       y = "Number of Accidents",
       fill = "Accident Severity") +
  scale_x_continuous(breaks = 0:23) +  # Show all hours (0-23)
  theme_minimal()  # Cleaner look
plot_h
```

```{r}
# Convert the clock to POSIXct format and classify into Morning and Evening
car_acc_time <- car_acc_time %>%
  mutate(time_of_day = case_when(
    format(as.POSIXct(clock, format = "%H:%M:%S"), "%H") >= "06" & 
    format(as.POSIXct(clock, format = "%H:%M:%S"), "%H") < "18" ~ "Morning",
    
    TRUE ~ "Evening"
  ))

# Verify the new time_of_day column
table(car_acc_time$time_of_day)
```

```{r}
plot_mn <- ggplot(car_acc_time, aes(x = time_of_day, fill = accident_severity)) +
  geom_bar(position = "stack") +
  labs(title = "Traffic Accidents by Severity and Time of Day",
       x = "Time of Day (Morning vs Evening)",
       y = "Number of Accidents",
       fill = "Accident Severity") +
  theme_minimal()  # For consistency with other plots
plot_mn
```

```{r}
ggplot(car_acc_time, aes(x = Day_of_week, y = hour)) +
  geom_tile(aes(fill = ..count..), stat = "bin2d", binwidth = c(1, 1)) +
  facet_wrap(~ accident_severity) +
  scale_fill_gradient(low = "white", high = "red") +
  labs(title = "Heatmap of Accidents by Day, Hour, and Severity",
       x = "Day of the Week",
       y = "Hour",
       fill = "Number of Accidents") +
  theme_minimal()
```
:::{.callout-tip}
A traffic safety strategy should focus on rush hour periods in Bangkok, with special attention to reducing the frequency of low and middle severity accidents. Implementing more targeted interventions during peak times and holiday periods, combined with improved traffic management in the most affected areas, can help reduce accident rates and improve road safety.
:::


## 4.2 Spatio-temporal Analysis

```{r}
# Set tmap mode to "plot" for static maps or "view" for interactive maps
tmap_mode("plot")

# Add a new column for 'day_type' to distinguish between weekday and weekend
car_acc_time <- car_acc_time %>%
  mutate(day_type = case_when(
    Day_of_week %in% c("Sat", "Sun") ~ "Weekend",
    TRUE ~ "Weekday"
  ))

# Create a tmap with facets for weekday and weekend, and color for accident severity
tm_shape(car_acc_time) +
  tm_dots(col = "accident_severity",   # Color points by 'accident_severity'
          palette = c("green", "yellow", "red"),  # Different colors for Low, Middle, Heavy
          size = 0.1,                  # Set point size
          alpha = 0.7,                 # Set transparency
          title = "Accident Severity") +  # Title for the legend
  tm_facets(by = "day_type", ncol = 1) +  # Separate the map into facets for Weekday and Weekend
  tm_layout(main.title = "Accidents by Severity and Day Type",  # Set the main title
            main.title.position = "center",            # Center the title
            main.title.size = 0.8,                     # Adjust title size
            legend.height = 0.45,                      # Adjust legend height
            legend.width = 0.35,                       # Adjust legend width
            frame = TRUE) +                            # Add a frame around the map
  tm_compass(type = "8star", size = 2) +               # Add a compass (8-star style)
  tm_scale_bar() +                                     # Add a scale bar
  tm_grid(alpha = 0.2) +                               # Add a grid with light transparency
  tm_credits("Source: Accident data",                  # Add credits to the map
             position = c("left", "bottom"))
```

:::{.callout-note}
This spatial analysis reveals that traffic accidents, especially of low and middle severity, are concentrated along major roads both during weekdays and weekends. Heavy accidents tend to cluster around central or high-traffic areas, necessitating further traffic safety interventions. The distinction between weekdays and weekends suggests that accident frequency is strongly linked to traffic volume, with weekdays showing a higher density of incidents.
:::